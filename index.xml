<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>尾張</title>
    <link>https://zintrulcre.vip/</link>
    <description>Recent content on 尾張</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 04 Aug 2021 17:38:52 +0800</lastBuildDate><atom:link href="https://zintrulcre.vip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 源码学习（5）：协程</title>
      <link>https://zintrulcre.vip/posts/python/python-source-code-coroutine/</link>
      <pubDate>Wed, 04 Aug 2021 17:38:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/python/python-source-code-coroutine/</guid>
      <description>Python 源码学习（5）：协程 [TOC] 协程 coroutine 是一种用户态的轻量级线程，它可以在函数的特定位置暂停或恢复，同时调用者可以从协程中获取状态或将状态传递给协程；</description>
    </item>
    
    <item>
      <title>Python 源码学习（4）：编译器和虚拟机</title>
      <link>https://zintrulcre.vip/posts/python/python-source-code-interpreter/</link>
      <pubDate>Wed, 26 May 2021 10:18:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/python/python-source-code-interpreter/</guid>
      <description>Python 源码学习（4）：编译器和虚拟机 [TOC] Python 是一种解释型语言，一般在使用前我们会从 Python 官方网站上下载使用 C 语言开发编译的 CPython 解释器，本文用到的源码均来自</description>
    </item>
    
    <item>
      <title>Python 源码学习（3）：list 类型</title>
      <link>https://zintrulcre.vip/posts/python/source-code-3-list-and-dict/</link>
      <pubDate>Thu, 06 May 2021 20:07:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/python/source-code-3-list-and-dict/</guid>
      <description>Python 源码学习（3）：list 类型 [TOC] Python 中的 list 类型在源码中是一个名为 PyListObject 的结构体，定义在 listobject.h 文件中： // Include/cpython/listobject.h typedef struct { PyObject_VAR_HEAD /* Vector of pointers to list elements. list[0] is ob_item[0], etc. */ PyObject **ob_item; /* ob_item contains space for</description>
    </item>
    
    <item>
      <title>ProtoBuf 语法和编码原理入门</title>
      <link>https://zintrulcre.vip/posts/serialization/protocol-buffer/</link>
      <pubDate>Mon, 26 Apr 2021 21:44:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/serialization/protocol-buffer/</guid>
      <description>ProtoBuf 语法和编码原理入门 [toc] 序列化是指将结构化数据转换成易于存储或发送的数据格式的过程，Protocol Buffer 简称 ProtoBuf，是一种语言无关，平</description>
    </item>
    
    <item>
      <title>Python 源码学习（2）：int 类型</title>
      <link>https://zintrulcre.vip/posts/python/source-code-2/</link>
      <pubDate>Wed, 31 Mar 2021 15:37:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/python/source-code-2/</guid>
      <description>Python 源码学习（2）：int 类型 [TOC] Python 中的标准数据类型有六种，分别是 number, string, list, tuple, set, dictionary，前文已经阐述过它们的对象类型都是继承了 PyBaseObject_Type 类型的</description>
    </item>
    
    <item>
      <title>Python 源码学习（1）：类型和对象</title>
      <link>https://zintrulcre.vip/posts/python/source-code-1/</link>
      <pubDate>Sun, 14 Mar 2021 16:05:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/python/source-code-1/</guid>
      <description>Python 源码学习（1）：类型和对象 [TOC] Python 是一门解释型，动态类型，多范式的编程语言，当我们从 python.org 下载并安装运行 Python 的某个分发版本时，我们实际上是在运行由 C</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 智能指针的简单实现</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/smart-pointer/</link>
      <pubDate>Sun, 21 Feb 2021 21:20:18 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/smart-pointer/</guid>
      <description>C++ 智能指针的简单实现 [TOC] 1 std::auto_ptr C++ 中经常会出现因为没有 delete 指针而造成的内存泄漏，例如有一个 Object 模板类： template&amp;lt;typename T&amp;gt; class Object { public: // constructor Object() : t_() { cout &amp;lt;&amp;lt; &amp;#34;Object::Constructor &amp;#34; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; endl; } Object(T t) :</description>
    </item>
    
    <item>
      <title>负载均衡和一致性哈希</title>
      <link>https://zintrulcre.vip/posts/service-governance/load-balancing/</link>
      <pubDate>Sun, 25 Oct 2020 23:06:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/service-governance/load-balancing/</guid>
      <description>负载均衡和一致性哈希 [TOC] 反向代理 reverse proxy 是指以代理服务器来接收由客户端发送来的请求，并通过一定的策略将其转变发给实际处理请求的后端服务器；主要应用</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 并发入门：以 LeetCode 1114 为例</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/concurrency/introduction-to-concurrency/</link>
      <pubDate>Wed, 30 Sep 2020 16:20:25 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/concurrency/introduction-to-concurrency/</guid>
      <description>C++ 并发入门：以 LeetCode 1114 为例 [toc] 题目 直接做题：1114 按序打印 解法 1. std::mutex 如果你对 c++ 11 略为熟悉的话，应该能够想到用 std::mutex 来解这道题，在函数构造时（主线程）对</description>
    </item>
    
    <item>
      <title>Effective C&#43;&#43; notes</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/%E5%9F%BA%E7%A1%80/effective-cpp/</link>
      <pubDate>Thu, 24 Sep 2020 16:43:27 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/%E5%9F%BA%E7%A1%80/effective-cpp/</guid>
      <description>Effective C++ 笔记 [TOC] 0 导言 1 构造函数 default 构造函数：可被调用而不带任何实参的构造函数，这样的构造函数要么没有参数，要么每个参数都带有默认值，例如 class Bar { public: //</description>
    </item>
    
  </channel>
</rss>
