<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZintrulCre</title>
    <link>https://zintrulcre.vip/</link>
    <description>Recent content on ZintrulCre</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 19 May 2019 19:40:23 +1000</lastBuildDate>
    
	<atom:link href="https://zintrulcre.vip/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Object Detection</title>
      <link>https://zintrulcre.vip/posts/deep-learning/object-detection-yolo/</link>
      <pubDate>Sun, 19 May 2019 19:40:23 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/deep-learning/object-detection-yolo/</guid>
      <description>Object Detection: YOLO Humans glance at an image and instantly know what objects are in the image, where they are, and how they interact. The human visual system is fast and accurate, allowing us to perform complex tasks like driving with little conscious thought. Fast, accurate algorithms for object detection would allow computers to drive cars without specialized sensors, enable assistive devices to convey real-time scene information to human users, and unlock the potential for general purpose, responsive robotic systems.</description>
    </item>
    
    <item>
      <title>Code Jam 2019 Round 1C</title>
      <link>https://zintrulcre.vip/posts/code-jam/2019-round-1c/</link>
      <pubDate>Tue, 07 May 2019 22:02:15 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/code-jam/2019-round-1c/</guid>
      <description>Code Jam 2019 Round 1C Robot Programming Strategy (10pts, 18pts) 已知所有人石头剪刀布的出招顺序，每一轮同时和所有人比赛，找到必胜的策略。 Solution: Eliminiating 每一轮遍历当前轮次所有人的出招，如果同时有三</description>
    </item>
    
    <item>
      <title>Kick Start 2019 Round B</title>
      <link>https://zintrulcre.vip/posts/kick-start/2019-round-b/</link>
      <pubDate>Sun, 21 Apr 2019 14:41:22 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/kick-start/2019-round-b/</guid>
      <description>Kick Start 2019 Round B Building Palindromes (5pts, 12pts) 判断给定区间内的子字符串是否是回文串。 Solution: Prefix Sum 判断字符串是否是回文串只需要判断字符串里个数为奇数的字符的数量是否小于等于1，</description>
    </item>
    
    <item>
      <title>Code Jam 2019 Round 1A</title>
      <link>https://zintrulcre.vip/posts/code-jam/2019-round-1a/</link>
      <pubDate>Sat, 13 Apr 2019 15:28:11 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/code-jam/2019-round-1a/</guid>
      <description>Code Jam 2019 Round 1A Pylons (8pts, 23pts) 在m*n的网格里移动，每次移动后的位置不能与之前的位置在同一行/列/对角线上。 Solution: BackTracking 类似于八皇后问题，不过每次的限制条件只和上</description>
    </item>
    
    <item>
      <title>Code Jam 2019 Qualification Round</title>
      <link>https://zintrulcre.vip/posts/code-jam/2019-qualification-round/</link>
      <pubDate>Sat, 06 Apr 2019 13:40:27 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/code-jam/2019-qualification-round/</guid>
      <description>Code Jam 2019 Qualification Round Foregone Solution (6pts, 10pts, 1pts) 将一个带有数字4的数拆分为两个不带数字4的数。 Solution: Construction 输入的数一定带有数字4，对于每一位上的数字4，我们可以将其拆分为2+2</description>
    </item>
    
    <item>
      <title>Kick Start 2019 Round A</title>
      <link>https://zintrulcre.vip/posts/kick-start/2019-round-a/</link>
      <pubDate>Tue, 26 Mar 2019 14:25:36 +1100</pubDate>
      
      <guid>https://zintrulcre.vip/posts/kick-start/2019-round-a/</guid>
      <description>Kick Start 2019 Round A Training (7pts, 13pts) 一共有N个人，从中选P个人，计算这P个人中 skill rating 的最大值与其他人的 skill rating 的差值之和。 \[ \sum_{i}^{j} max(rating) - rating[i] \] Solution: Sort + Prefix Sum 先对数组排序，然后在长</description>
    </item>
    
    <item>
      <title>Methods to Prevent Overfitting in Deep Learning</title>
      <link>https://zintrulcre.vip/posts/deep-learning/methods-to-prevent-overfitting-in-deep-learning/</link>
      <pubDate>Wed, 20 Mar 2019 09:55:04 +1100</pubDate>
      
      <guid>https://zintrulcre.vip/posts/deep-learning/methods-to-prevent-overfitting-in-deep-learning/</guid>
      <description>Methods to Prevent Overfitting in Deep Learning Overfitting Overfitting refers to that when a model fits the training data well but cannot predict the test data correctly, we may say that the model lacks the ability of generalization. It is important to figure out how it happens, and how we can prevent overfitting from the very beginning.
Detect Overfitting The simplest way to detect overfitting is to split the dataset into two parts: the training set for training the model, and the test set for testing the accuracy of the model on a dataset that it has never seen before.</description>
    </item>
    
    <item>
      <title>Notebooks</title>
      <link>https://zintrulcre.vip/notebooks/</link>
      <pubDate>Sun, 17 Mar 2019 11:48:06 +1100</pubDate>
      
      <guid>https://zintrulcre.vip/notebooks/</guid>
      <description> Python
 Command
 Deep Learning
 Cluster and Cloud Computing
 Natural Language Processing
  </description>
    </item>
    
    <item>
      <title>LeetCode 208 实现 Trie (前缀树)</title>
      <link>https://zintrulcre.vip/posts/leetcode/208/</link>
      <pubDate>Fri, 15 Mar 2019 10:56:12 +1100</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/208/</guid>
      <description>LeetCode 208 实现 Trie (前缀树) 实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。 示例: Trie trie = new Trie(); trie.insert(&amp;#34;apple&amp;#34;); trie.search(&amp;#34;apple&amp;#34;); // 返回 true trie.search(&amp;#34;app&amp;#34;); // 返回 false trie.startsWith(&amp;#34;app&amp;#34;); // 返回 true trie.insert(&amp;#34;app&amp;#34;); trie.search(&amp;#34;app&amp;#34;); // 返回 true 说明: 你可以假</description>
    </item>
    
    <item>
      <title>LeetCode 98 验证二叉搜索树</title>
      <link>https://zintrulcre.vip/posts/leetcode/98/</link>
      <pubDate>Tue, 12 Feb 2019 21:44:35 +1100</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/98/</guid>
      <description>LeetCode 98 验证二叉搜索树 给定一个二叉树，判断其是否是一个有效的二叉搜索树。 假设一个二叉搜索树具有如下特征： 节点的左子树只包含小于当前节点的数。 节点</description>
    </item>
    
  </channel>
</rss>