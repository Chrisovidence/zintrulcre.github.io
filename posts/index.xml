<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 尾張</title>
    <link>https://zintrulcre.vip/posts/</link>
    <description>Recent content in Posts on 尾張</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 04 Jul 2019 19:12:25 +1000</lastBuildDate>
    
	<atom:link href="https://zintrulcre.vip/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 链表</title>
      <link>https://zintrulcre.vip/posts/leetcode/linkedlist/</link>
      <pubDate>Thu, 04 Jul 2019 19:12:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/linkedlist/</guid>
      <description>LeetCode 链表 题目 1. 常规题 21 合并两个有序链表 合并两个有序链表。 逐个比较大小并添加到当前节点后面，并移动对应的链表节点。 classSolution { public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) { ListNode *head = new ListNode(0), *node</description>
    </item>
    
    <item>
      <title>LeetCode 动态规划（3）</title>
      <link>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-3/</link>
      <pubDate>Mon, 01 Jul 2019 18:22:45 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-3/</guid>
      <description>LeetCode 动态规划 题目 6. 字符串相关 712 两个字符串的最小ASCII删除和 给定两个字符串，计算使两个字符串相同所需要删除的字符的ASCII值的和的最小值。</description>
    </item>
    
    <item>
      <title>LeetCode 动态规划（2）</title>
      <link>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-2/</link>
      <pubDate>Fri, 28 Jun 2019 10:09:13 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-2/</guid>
      <description>LeetCode 动态规划 题目 3. 数组相关 300 最长上升子序列 在无序数组中找到最长上升子序列的长度。 用一个数组 dp[i] 表示到第 i 个数字为止的最长上升子序列，每次遍历 i 之</description>
    </item>
    
    <item>
      <title>LeetCode 动态规划（1）</title>
      <link>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-1/</link>
      <pubDate>Wed, 26 Jun 2019 18:08:10 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-1/</guid>
      <description>LeetCode 动态规划 题目 1. 数字相关 263 丑数 判断一个数 num 是否是丑数。 通用的方法是自底向上求出大于等于 num 的第一个数来判断 num 是否是丑数。但这道题已经给出了数 n</description>
    </item>
    
    <item>
      <title>LeetCode 二分查找</title>
      <link>https://zintrulcre.vip/posts/leetcode/binarysearch/</link>
      <pubDate>Wed, 19 Jun 2019 19:26:39 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/binarysearch/</guid>
      <description>LeetCode 二分查找 二分查找可以在有序数组中以较高的效率查找符合条件的值，时间复杂度是O(logN)，空间复杂度是O(1)。 易错点 计算中间值的方法 k =</description>
    </item>
    
    <item>
      <title>LeetCode 位运算</title>
      <link>https://zintrulcre.vip/posts/leetcode/bitmanipulation/</link>
      <pubDate>Wed, 19 Jun 2019 19:26:39 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/bitmanipulation/</guid>
      <description>LeetCode 位运算 位运算包括： 与 &amp;amp; 或 | 异或 ^ 取反 ~ 左移 &amp;lt;&amp;lt; 右移 &amp;gt;&amp;gt; 技巧 移位运算 x &amp;lt;&amp;lt; 1：算数左移 数字的二进制表示的所有位向左移动一位，相当于乘以 2 在右边补 0</description>
    </item>
    
    <item>
      <title>Kick Start 2019 Round C</title>
      <link>https://zintrulcre.vip/posts/kick-start/2019-round-c/</link>
      <pubDate>Sun, 26 May 2019 23:29:45 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/kick-start/2019-round-c/</guid>
      <description>Kick Start 2019 Round C Wiggle Walk (6pts, 12pts) 在一个R * C的矩阵里面移动，遇到已经走过的格子直接跳过。数据保证移动时不会超出给定的矩阵。 Solution: Simulation 用一个visited数组记录</description>
    </item>
    
    <item>
      <title>Object Detection</title>
      <link>https://zintrulcre.vip/posts/deep-learning/object-detection-yolo/</link>
      <pubDate>Sun, 19 May 2019 19:40:23 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/deep-learning/object-detection-yolo/</guid>
      <description>Object Detection Object detection deals with detecting instances of objects of a certain class, such as humans, animals, etc, in digital images and videos. Object detection has applications in many areas of computer vision, including image retrieval, face detection, video surveillance, and self-driving, etc. Current detection systems repurpose classifiers to perform detection. To detect an object, these systems take a classifier for that object and evaluate it at various locations and scales in a test image.</description>
    </item>
    
    <item>
      <title>Code Jam 2019 Round 1C</title>
      <link>https://zintrulcre.vip/posts/code-jam/2019-round-1c/</link>
      <pubDate>Tue, 07 May 2019 22:02:15 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/code-jam/2019-round-1c/</guid>
      <description>Code Jam 2019 Round 1C Robot Programming Strategy (10pts, 18pts) 已知所有人石头剪刀布的出招顺序，每一轮同时和所有人比赛，找到必胜的策略。 Solution: Eliminiating 每一轮遍历当前轮次所有人的出招，如果同时有三</description>
    </item>
    
    <item>
      <title>Kick Start 2019 Round B</title>
      <link>https://zintrulcre.vip/posts/kick-start/2019-round-b/</link>
      <pubDate>Sun, 21 Apr 2019 14:41:22 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/kick-start/2019-round-b/</guid>
      <description>Kick Start 2019 Round B Building Palindromes (5pts, 12pts) 判断给定区间内的子字符串是否是回文串。 Solution: Prefix Sum 判断字符串是否是回文串只需要判断字符串里个数为奇数的字符的数量是否小于等于1，</description>
    </item>
    
  </channel>
</rss>