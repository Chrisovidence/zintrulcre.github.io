<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZintrulCre</title>
    <link>https://zintrulcre.vip/posts/</link>
    <description>Recent content in Posts on ZintrulCre</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 26 Jun 2019 18:08:10 +1000</lastBuildDate>
    
	<atom:link href="https://zintrulcre.vip/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 动态规划（1）</title>
      <link>https://zintrulcre.vip/posts/leetcode/dynamic-programming-1/</link>
      <pubDate>Wed, 26 Jun 2019 18:08:10 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/dynamic-programming-1/</guid>
      <description>LeetCode 动态规划 题目 1. 丑数 丑数是质因数只有 2, 3, 5 的正整数。丑数类的题目用暴力法一般都会 TLE，可以用 DP 来将时间复杂度优化到 O(m * n)，其中 m 是质因数</description>
    </item>
    
    <item>
      <title>LeetCode 750 角矩形的数量</title>
      <link>https://zintrulcre.vip/posts/leetcode/750/</link>
      <pubDate>Fri, 21 Jun 2019 17:07:07 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/750/</guid>
      <description>LeetCode 750 角矩形的数量 给一个矩阵，找出里面矩形的数量。 最直观的方法就是暴力法，先找到值为1的点，然后遍历其所在的行和列，再判断能否构成矩形，时间复</description>
    </item>
    
    <item>
      <title>LeetCode 二分查找</title>
      <link>https://zintrulcre.vip/posts/leetcode/binarysearch/</link>
      <pubDate>Wed, 19 Jun 2019 19:26:39 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/binarysearch/</guid>
      <description>LeetCode 二分查找 二分查找可以在有序数组中以较高的效率查找符合条件的值，时间复杂度是O(logN)，空间复杂度是O(1)。 易错点 计算中间值的方法 k =</description>
    </item>
    
    <item>
      <title>LeetCode 946 验证栈序列</title>
      <link>https://zintrulcre.vip/posts/leetcode/946/</link>
      <pubDate>Sun, 02 Jun 2019 18:22:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/946/</guid>
      <description>LeetCode 946 验证栈序列 给定 pushed 和 popped 两个数组，判断这两个数组能否通过一个空栈执行 push 和 pop 得到。 很典型的贪心+栈。用一个栈把 pushed 数组里的数依次 push 进去，push</description>
    </item>
    
    <item>
      <title>LeetCode 1023 驼峰式匹配</title>
      <link>https://zintrulcre.vip/posts/leetcode/1023/</link>
      <pubDate>Sat, 01 Jun 2019 11:56:14 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/1023/</guid>
      <description>LeetCode 1023 驼峰式匹配 给定一个模式字符串pattern和一组查询字符串queries，通过向pattern中插入小写字母来跟queries中的字符匹</description>
    </item>
    
    <item>
      <title>Kick Start 2019 Round C</title>
      <link>https://zintrulcre.vip/posts/kick-start/2019-round-c/</link>
      <pubDate>Sun, 26 May 2019 23:29:45 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/kick-start/2019-round-c/</guid>
      <description>Kick Start 2019 Round C Wiggle Walk (6pts, 12pts) 在一个R * C的矩阵里面移动，遇到已经走过的格子直接跳过。数据保证移动时不会超出给定的矩阵。 Solution: Simulation 用一个visited数组记录</description>
    </item>
    
    <item>
      <title>Code Jam 2019 Round 1C</title>
      <link>https://zintrulcre.vip/posts/code-jam/2019-round-1c/</link>
      <pubDate>Tue, 07 May 2019 22:02:15 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/code-jam/2019-round-1c/</guid>
      <description>Code Jam 2019 Round 1C Robot Programming Strategy (10pts, 18pts) 已知所有人石头剪刀布的出招顺序，每一轮同时和所有人比赛，找到必胜的策略。 Solution: Eliminiating 每一轮遍历当前轮次所有人的出招，如果同时有三</description>
    </item>
    
    <item>
      <title>Kick Start 2019 Round B</title>
      <link>https://zintrulcre.vip/posts/kick-start/2019-round-b/</link>
      <pubDate>Sun, 21 Apr 2019 14:41:22 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/kick-start/2019-round-b/</guid>
      <description>Kick Start 2019 Round B Building Palindromes (5pts, 12pts) 判断给定区间内的子字符串是否是回文串。 Solution: Prefix Sum 判断字符串是否是回文串只需要判断字符串里个数为奇数的字符的数量是否小于等于1，</description>
    </item>
    
    <item>
      <title>Code Jam 2019 Round 1A</title>
      <link>https://zintrulcre.vip/posts/code-jam/2019-round-1a/</link>
      <pubDate>Sat, 13 Apr 2019 15:28:11 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/code-jam/2019-round-1a/</guid>
      <description>Code Jam 2019 Round 1A Pylons (8pts, 23pts) 在m*n的网格里移动，每次移动后的位置不能与之前的位置在同一行/列/对角线上。 Solution: BackTracking 类似于八皇后问题，不过每次的限制条件只和上</description>
    </item>
    
    <item>
      <title>Code Jam 2019 Qualification Round</title>
      <link>https://zintrulcre.vip/posts/code-jam/2019-qualification-round/</link>
      <pubDate>Sat, 06 Apr 2019 13:40:27 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/code-jam/2019-qualification-round/</guid>
      <description>Code Jam 2019 Qualification Round Foregone Solution (6pts, 10pts, 1pts) 将一个带有数字4的数拆分为两个不带数字4的数。 Solution: Construction 输入的数一定带有数字4，对于每一位上的数字4，我们可以将其拆分为2+2</description>
    </item>
    
  </channel>
</rss>