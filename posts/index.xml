<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 尾張</title>
    <link>https://zintrulcre.vip/posts/</link>
    <description>Recent content in Posts on 尾張</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 31 Jul 2019 19:12:25 +1000</lastBuildDate>
    
	<atom:link href="https://zintrulcre.vip/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 双指针</title>
      <link>https://zintrulcre.vip/posts/leetcode/twopointers/</link>
      <pubDate>Wed, 31 Jul 2019 19:12:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/twopointers/</guid>
      <description>LeetCode DFS 题目 287 寻找重复数 将出现的数字的绝对值 - 1 作为下标，把对应位置的数字乘以 -1 进行标记，因为只有一个数字重复了，所以如果在标记时如果发现对应位</description>
    </item>
    
    <item>
      <title>LeetCode 深度优先搜索</title>
      <link>https://zintrulcre.vip/posts/leetcode/dfs/</link>
      <pubDate>Sat, 27 Jul 2019 12:12:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/dfs/</guid>
      <description>LeetCode DFS 题目 1. DFS 733 图像渲染 从给定的 image[sr][sc] 开始 DFS 或 BFS，将相邻的值相同的点的值全部修改为 newColor，注意要判断给定的 image[sr][sc] 是否等于 newColor</description>
    </item>
    
    <item>
      <title>LeetCode 并发</title>
      <link>https://zintrulcre.vip/posts/leetcode/concurrency/</link>
      <pubDate>Mon, 22 Jul 2019 10:10:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/concurrency/</guid>
      <description>LeetCode 并发 题目 1114 按序打印 C++ mutex classFoo { mutex lock1, lock2; public: Foo() { lock1.lock(); lock2.lock(); } void first(function&amp;lt;void()&amp;gt; printFirst) { printFirst(); lock1.unlock(); } void second(function&amp;lt;void()&amp;gt; printSecond) { lock1.lock(); printSecond(); lock1.unlock(); lock2.unlock(); } void third(function&amp;lt;void()&amp;gt; printThird) { lock2.lock(); printThird(); lock2.unlock(); } }; C++ condition_variable classFoo { int i; mutex mut; condition_variable con_var1, con_var2; public: Foo() : i(1) { } void first(function&amp;lt;void()&amp;gt; printFirst) { unique_lock&amp;lt;mutex&amp;gt;</description>
    </item>
    
    <item>
      <title>LeetCode 树（2）</title>
      <link>https://zintrulcre.vip/posts/leetcode/tree-2/</link>
      <pubDate>Thu, 18 Jul 2019 19:12:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/tree-2/</guid>
      <description>LeetCode 树（2） 题目 3. 二叉搜索树 95 不同的二叉搜索树 II 生成由 1 &amp;hellip; n 为节点所组成的二叉搜索树。 为了构造以 i 为根节点的二叉搜索树，我们需要先构造以 1 &amp;hellip; i</description>
    </item>
    
    <item>
      <title>LeetCode 树（1）</title>
      <link>https://zintrulcre.vip/posts/leetcode/tree-1/</link>
      <pubDate>Sat, 13 Jul 2019 19:12:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/tree-1/</guid>
      <description>LeetCode 树（1） 题目 1. 树的遍历 144 二叉树的前序遍历 前序遍历一个二叉树。 前序遍历是按照根节点，左子节点，右子节点的顺序来遍历一个二叉树，有递归和迭代两</description>
    </item>
    
    <item>
      <title>LeetCode 链表（2）</title>
      <link>https://zintrulcre.vip/posts/leetcode/linkedlist-2/</link>
      <pubDate>Tue, 09 Jul 2019 19:12:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/linkedlist-2/</guid>
      <description>LeetCode 链表（2） 题目 4. 双指针 19 删除链表的倒数第N个节点 删除链表的倒数第 n 个节点。 在链表中不易直接取到倒数第 n 个位置，所以用两个指针 prev 和 tail，</description>
    </item>
    
    <item>
      <title>LeetCode 链表（1）</title>
      <link>https://zintrulcre.vip/posts/leetcode/linkedlist-1/</link>
      <pubDate>Thu, 04 Jul 2019 19:12:25 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/linkedlist-1/</guid>
      <description>LeetCode 链表（1） 题目 1. 常规题 2 两数相加 给两个链表分别代表两个正数的逆序表示，计算两个链表之和。 依次按位进行相加。 classSolution { public: ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) { int acc = 0, val = 0;</description>
    </item>
    
    <item>
      <title>LeetCode 动态规划（3）</title>
      <link>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-3/</link>
      <pubDate>Mon, 01 Jul 2019 18:22:45 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-3/</guid>
      <description>LeetCode 动态规划 题目 6. 字符串相关 712 两个字符串的最小ASCII删除和 给定两个字符串，计算使两个字符串相同所需要删除的字符的ASCII值的和的最小值。</description>
    </item>
    
    <item>
      <title>LeetCode 动态规划（2）</title>
      <link>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-2/</link>
      <pubDate>Fri, 28 Jun 2019 10:09:13 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-2/</guid>
      <description>LeetCode 动态规划 题目 3. 数组相关 300 最长上升子序列 在无序数组中找到最长上升子序列的长度。 用一个数组 dp[i] 表示到第 i 个数字为止的最长上升子序列，每次遍历 i 之</description>
    </item>
    
    <item>
      <title>LeetCode 动态规划（1）</title>
      <link>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-1/</link>
      <pubDate>Wed, 26 Jun 2019 18:08:10 +1000</pubDate>
      
      <guid>https://zintrulcre.vip/posts/leetcode/dynamicprogramming-1/</guid>
      <description>LeetCode 动态规划 题目 1. 数字相关 263 丑数 判断一个数 num 是否是丑数。 通用的方法是自底向上求出大于等于 num 的第一个数来判断 num 是否是丑数。但这道题已经给出了数 n</description>
    </item>
    
  </channel>
</rss>