<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 尾張</title>
    <link>https://zintrulcre.vip/posts/</link>
    <description>Recent content in Posts on 尾張</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 14 Mar 2021 16:05:52 +0800</lastBuildDate><atom:link href="https://zintrulcre.vip/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 源码学习（1）：类型和对象</title>
      <link>https://zintrulcre.vip/posts/python/source-code-1/</link>
      <pubDate>Sun, 14 Mar 2021 16:05:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/python/source-code-1/</guid>
      <description>Python 源码学习（1）：类型和对象 [TOC] Python 是一门解释型，动态类型，多范式的编程语言，当我们从 python.org 下载并安装运行 Python 的某个分发版本时，我们实际上是在运行由 C</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 智能指针的简单实现</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/smart-pointer/</link>
      <pubDate>Sun, 21 Feb 2021 21:20:18 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/smart-pointer/</guid>
      <description>C++ 智能指针的简单实现 [TOC] 1 std::auto_ptr C++ 中经常会出现因为没有 delete 指针而造成的内存泄漏，例如有一个 Object 模板类： template&amp;lt;typename T&amp;gt; class Object { public: // constructor Object() : t_() { cout &amp;lt;&amp;lt; &amp;#34;Object::Constructor &amp;#34; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; endl; } Object(T t) :</description>
    </item>
    
    <item>
      <title>负载均衡和一致性哈希</title>
      <link>https://zintrulcre.vip/posts/service-governance/load-balancing/</link>
      <pubDate>Sun, 25 Oct 2020 23:06:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/service-governance/load-balancing/</guid>
      <description>负载均衡和一致性哈希 [TOC] 反向代理 reverse proxy 是指以代理服务器来接收由客户端发送来的请求，并通过一定的策略将其转变发给实际处理请求的后端服务器；主要应用</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 并发入门：以 LeetCode 1114 为例</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/concurrency/introduction-to-concurrency/</link>
      <pubDate>Wed, 30 Sep 2020 16:20:25 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/concurrency/introduction-to-concurrency/</guid>
      <description>C++ 并发入门：以 LeetCode 1114 为例 [toc] 题目 直接做题：1114 按序打印 解法 1. std::mutex 如果你对 c++ 11 略为熟悉的话，应该能够想到用 std::mutex 来解这道题，在函数构造时（主线程）对</description>
    </item>
    
    <item>
      <title>Effective C&#43;&#43; notes</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/%E5%9F%BA%E7%A1%80/effective-cpp/</link>
      <pubDate>Thu, 24 Sep 2020 16:43:27 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/%E5%9F%BA%E7%A1%80/effective-cpp/</guid>
      <description>Effective C++ 笔记 [TOC] 0 导言 1 构造函数 default 构造函数：可被调用而不带任何实参的构造函数，这样的构造函数要么没有参数，要么每个参数都带有默认值，例如 class Bar { public: //</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 单例模式的模板实现</title>
      <link>https://zintrulcre.vip/posts/design-pattern/c&#43;&#43;-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 10 Sep 2020 21:25:43 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/design-pattern/c&#43;&#43;-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0/</guid>
      <description>C++ 单例模式的模板实现 单例模式是一种创建型的设计模式（creational design patterns），使用单例模式进行设计的类在程序中只拥有一个实例</description>
    </item>
    
    <item>
      <title>并行计算入门</title>
      <link>https://zintrulcre.vip/posts/parallel-computing/parallel-computing/</link>
      <pubDate>Wed, 12 Aug 2020 18:32:52 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/parallel-computing/parallel-computing/</guid>
      <description>并行计算入门 [TOC] 1 概述 1.1 并行计算 高性能计算（High Performance Computing）是计算机科学中的一个领域，其目的可以概括为优化性能，它包括了缓存技术</description>
    </item>
    
    <item>
      <title>boost::typeIndex 的相关探究</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/boost/boost.typeindex-%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8E%A2%E7%A9%B6/</link>
      <pubDate>Fri, 31 Jul 2020 20:31:06 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/boost/boost.typeindex-%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8E%A2%E7%A9%B6/</guid>
      <description>boost::typeIndex 的相关探究 Effective Modern C++ 的 Item 4: Know how to view deduced types. 中提到了 Boost::typeindex 的使用，但并没有讲到其实现原理。 1. typeid 操作符 typeid 是 C++ 中的一个操作符，可以用于获取类型的信息，常常用</description>
    </item>
    
    <item>
      <title>CMake 入门</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/%E7%BC%96%E8%AF%91/cmake/</link>
      <pubDate>Sun, 21 Jun 2020 15:46:06 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/%E7%BC%96%E8%AF%91/cmake/</guid>
      <description>CMake 入门 0. 序 CMake 是一个跨平台的开源构建工具，使用 CMake 能够方便地管理依赖多个库的目录层次结构并生成 makefile 和使用 GNU make 来编译和连接程序。 1. 构建单个文件 1.1 使用</description>
    </item>
    
    <item>
      <title>GDB 调试入门</title>
      <link>https://zintrulcre.vip/posts/c&#43;&#43;/%E7%BC%96%E8%AF%91/gdb/</link>
      <pubDate>Wed, 22 Apr 2020 17:46:06 +0800</pubDate>
      
      <guid>https://zintrulcre.vip/posts/c&#43;&#43;/%E7%BC%96%E8%AF%91/gdb/</guid>
      <description>GDB 调试入门 0. 序 调试程序是开发过程中必不可少的一环，在 Windows 或 MacOS 上开发时，可以使用 VS 和 CLion 等 IDE 上自带的调试功能来打断点或查看变量和堆栈，但 Linux 并没有图</description>
    </item>
    
  </channel>
</rss>
