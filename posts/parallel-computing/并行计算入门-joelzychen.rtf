{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \qc \f0 \sa180 \li0 \fi0 \b \fs36 "\u24182?\u34892?\u35745?\u31639?\u20837?\u38376?"\par}
{\pard \qc \f0 \sa180 \li0 \fi0  2020-08-12T18:32:52+08:00\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 \u24182?\u34892?\u35745?\u31639?\u20837?\u38376?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "#header-n2"}}{\fldrslt{\ul
\u24182?\u34892?\u35745?\u31639?\u20837?\u38376?
}}}
\line \tab {\field{\*\fldinst{HYPERLINK "#header-n4"}}{\fldrslt{\ul
1 \u27010?\u36848?
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n5"}}{\fldrslt{\ul
1.1 \u24182?\u34892?\u35745?\u31639?
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n8"}}{\fldrslt{\ul
1.2 \u30828?\u20214?\u26550?\u26500?
}}}
\line \tab {\field{\*\fldinst{HYPERLINK "#header-n27"}}{\fldrslt{\ul
2 \u27010?\u24565?
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n28"}}{\fldrslt{\ul
2.1 \u35775?\u23384?\u27169?\u22411?
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n45"}}{\fldrslt{\ul
2.2 Flynn \u20998?\u31867?\u27861?
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n60"}}{\fldrslt{\ul
2.3 \u21152?\u36895?\u27604?
}}}
\line \tab {\field{\*\fldinst{HYPERLINK "#header-n91"}}{\fldrslt{\ul
3 \u24182?\u34892?\u35745?\u31639?\u26694?\u26550?
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n92"}}{\fldrslt{\ul
3.1 OpenMP
}}}
\line \tab \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n95"}}{\fldrslt{\ul
Directive
}}}
\line \tab \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n101"}}{\fldrslt{\ul
Example
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n107"}}{\fldrslt{\ul
3.2 OpenMPI
}}}
\line \tab \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n109"}}{\fldrslt{\ul
API
}}}
\line \tab \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n124"}}{\fldrslt{\ul
Example
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n149"}}{\fldrslt{\ul
3.3 CUDA
}}}
\line \tab \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n152"}}{\fldrslt{\ul
Kernel
}}}
\line \tab \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n166"}}{\fldrslt{\ul
Thread Hierarchy
}}}
\line \tab \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n180"}}{\fldrslt{\ul
Example
}}}
\line \tab {\field{\*\fldinst{HYPERLINK "#header-n218"}}{\fldrslt{\ul
4 \u24635?\u32467?
}}}
\line \tab {\field{\*\fldinst{HYPERLINK "#header-n221"}}{\fldrslt{\ul
5 \u38468?\u24405?
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n222"}}{\fldrslt{\ul
0-1 \u32972?\u21253?\u38382?\u39064?\u38543?\u26426?\u25968?\u25454?\u29983?\u25104?\u22120?
}}}
\line \tab \tab {\field{\*\fldinst{HYPERLINK "#header-n224"}}{\fldrslt{\ul
\u21442?\u32771?\u25991?\u29486?
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 1 \u27010?\u36848?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 1.1 \u24182?\u34892?\u35745?\u31639?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u39640?\u24615?\u33021?\u35745?\u31639?}\u65288?High Performance Computing\u65289?\u26159?\u35745?\u31639?\u26426?\u31185?\u23398?\u20013?\u30340?\u19968?\u20010?\u39046?\u22495?\u65292?\u20854?\u30446?\u30340?\u21487?\u20197?\u27010?\u25324?\u20026?{\b \u20248?\u21270?\u24615?\u33021?}\u65292?\u23427?\u21253?\u25324?\u20102?\u32531?\u23384?\u25216?\u26415?\u12289?\u25968?\u25454?\u32467?\u26500?\u21644?\u31639?\u27861?\u12289?IO \u20248?\u21270?\u12289?\u25351?\u20196?\u37325?\u32452?\u65288?instruction reorganization\u65289?\u12289?\u32534?\u35793?\u22120?\u20248?\u21270?\u31561?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u24182?\u34892?\u35745?\u31639?}\u65288?Parallel Computing\u65289?\u26159?{\b \u39640?\u24615?\u33021?\u35745?\u31639?}\u19979?\u30340?\u19968?\u20010?\u32454?\u20998?\u39046?\u22495?\u65292?\u20854?\u20027?\u35201?\u24605?\u24819?\u26159?\u23558?\u22797?\u26434?\u38382?\u39064?\u20998?\u35299?\u25104?\u33509?\u24178?\u20010?\u37096?\u20998?\u65292?\u23558?\u27599?\u19968?\u20010?\u37096?\u20998?\u20132?\u32473?\u29420?\u31435?\u30340?\u22788?\u29702?\u22120?\u65288?\u35745?\u31639?\u36164?\u28304?\u65289?\u36827?\u34892?\u35745?\u31639?\u65292?\u20197?\u25552?\u39640?\u25928?\u29575?\u65307?\u38024?\u23545?\u19981?\u21516?\u30340?\u38382?\u39064?\u65292?\u24182?\u34892?\u35745?\u31639?\u38656?\u35201?\u19987?\u29992?\u30340?\u24182?\u34892?\u26550?\u26500?\u65292?\u26550?\u26500?\u26082?\u21487?\u20197?\u26159?\u19987?\u38376?\u35774?\u35745?\u30340?\u65292?\u21547?\u26377?\u22810?\u20010?\u22788?\u29702?\u22120?\u30340?\u21333?\u19968?\u30828?\u20214?\u25110?\u36229?\u32423?\u35745?\u31639?\u26426?\u65292?\u20063?\u21487?\u20197?\u26159?\u20197?\u26576?\u31181?\u26041?\u24335?\u20114?\u36830?\u30340?\u33509?\u24178?\u21488?\u30340?\u29420?\u31435?\u35745?\u31639?\u26426?\u26500?\u25104?\u30340?\u38598?\u32676?\u65307?\u24182?\u27809?\u26377?\u19968?\u20010?\u32479?\u19968?\u30340?\u24182?\u34892?\u35745?\u31639?\u26550?\u26500?\u36866?\u29992?\u20110?\u27599?\u19968?\u20010?\u38382?\u39064?\u65292?\u22914?\u26524?\u20351?\u29992?\u20102?\u38169?\u35823?\u30340?\u26550?\u26500?\u65292?\u24182?\u34892?\u35745?\u31639?\u29978?\u33267?\u20250?\u23548?\u33268?\u24615?\u33021?\u19979?\u38477?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 1.2 \u30828?\u20214?\u26550?\u26500?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u20013?\u22830?\u22788?\u29702?\u22120?}\u65288?Central Processing Unit\u65289?\u30340?\u20027?\u35201?\u21151?\u33021?\u26159?\u35299?\u37322?\u35745?\u31639?\u26426?\u25351?\u20196?\u65292?\u23427?\u30001?{\b \u25511?\u21046?\u21333?\u20803?}\u65288?Control Unit\u65289?\u12289?{\b \u31639?\u26415?\u36923?\u36753?\u21333?\u20803?}\u65288?Arithmetic Logic Unit\u65289?\u12289?{\b \u20081?\u24207?\u25511?\u21046?\u21333?\u20803?}\u65288?Out-of-Order Control Unit\u65289?\u12289?{\b \u20998?\u25903?\u39044?\u27979?\u22120?}\u65288?Branch Predictor\u65289?\u12289?{\b \u25968?\u25454?\u32531?\u23384?}\u65288?Data Cache\u65289?\u31561?\u37096?\u20214?\u32452?\u25104?\u65307?{\b CPU} \u34987?\u35774?\u35745?\u20026?\u21487?\u20197?\u24555?\u36895?\u22320?\u22788?\u29702?\u21508?\u31181?\u36890?\u29992?\u35745?\u31639?\u20219?\u21153?\u24182?\u26368?\u23567?\u21270?\u24310?\u36831?\u65292?\u20294?\u22312?\u24182?\u21457?\u24615?\u65288?\u26102?\u38047?\u39057?\u29575?\u65289?\u26041?\u38754?\u21463?\u21040?\u38480?\u21046?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/cpu.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u22270?\u24418?\u22788?\u29702?\u22120?}\u65288?Graphics Processing Unit, GPU\u65289?\u26159?\u33521?\u20255?\u36798?\u65288?NVIDIA\u65289?\u22312? 1999 \u24180? 8 \u26376?\u21457?\u24067? {\field{\*\fldinst{HYPERLINK "https://zh.wikipedia.org/wiki/NVIDIA_GeForce_256"}}{\fldrslt{\ul
NVIDIA GeForce 256
}}}
 \u26102?\u25552?\u20986?\u30340?\u27010?\u24565?\u65307?\u29616?\u20195? GPU \u30340?\u27169?\u22411?\u35774?\u35745?\u21487?\u20197?\u27010?\u25324?\u20026?\u20960?\u20010?\u20851?\u38190?\u28857?\u65306?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab GPU \u30340?\u35774?\u35745?\u30446?\u30340?\u26159?\u26368?\u22823?\u21270?\u21534?\u21520?\u37327?\u65288?Throughput\u65289?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab \u33021?\u22815?\u23558?\u31243?\u24207?\u20013?\u25968?\u25454?\u21487?\u24182?\u34892?\u30340?\u37096?\u20998?\u20174? CPU \u36716?\u31227?\u21040? GPU\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab \u33021?\u22815?\u20351?\u29992?\u23613?\u21487?\u33021?\u22810?\u30340?\u32447?\u31243?\u36827?\u34892?\u24182?\u34892?\u35745?\u31639?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b GPU} \u25317?\u26377?\u30340?{\b \u20869?\u26680?}\u25968?\u37327?\u30456?\u36739?\u20110? CPU \u22810?\u24471?\u22810?\u65292?\u21487?\u20197?\u26377?\u25968?\u21315?\u20010?\u21516?\u26102?\u36816?\u34892?\u30340?\u20869?\u26680?\u25191?\u34892?\u22823?\u35268?\u27169?\u24182?\u34892?\u35745?\u31639?\u65292?\u22240?\u27492?\u22312?\u26089?\u26399?\u19987?\u38376?\u24212?\u29992?\u20110?\u22270?\u24418?\u25968?\u25454?\u30340?\u22788?\u29702?\u65292?\u20294?\u38543?\u30528?\u36817?\u21313?\u20960?\u24180?\u30340?\u21457?\u23637?\u65292?\u20854?\u24378?\u22823?\u30340?\u24182?\u34892?\u22788?\u29702?\u33021?\u21147?\u20063?\u20351?\u20854?\u21487?\u20197?\u22788?\u29702?\u38750?\u22270?\u24418?\u25968?\u25454?\u65292?\u23588?\u20854?\u22312?{\b \u28145?\u24230?\u23398?\u20064?}\u39046?\u22495?\u38750?\u24120?\u21463?\u27426?\u36814?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/gpu.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u22312?\u21046?\u36896?\u24037?\u33402?\u30340?\u38480?\u21046?\u19979?\u65292?\u33455?\u29255?\u30340?\u23494?\u24230?\u21644?\u26368?\u22823?\u38754?\u31215?\u37117?\u26159?\u26377?\u38480?\u30340?\u65288?{\field{\*\fldinst{HYPERLINK "[https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B](https://zh.wikipedia.org/wiki/\u25705?\u23572?\u23450?\u24459?)"}}{\fldrslt{\ul
\u25705?\u23572?\u23450?\u24459?
}}}
\u65289?\u65292?\u22240?\u27492?\u33455?\u29255?\u35774?\u35745?\u23454?\u38469?\u19978?\u26159?\u21151?\u33021?\u21644?\u20803?\u20214?\u25968?\u37327?\u30340?\u26435?\u34913?\u65307?\u20986?\u20110?\u23545?\u36890?\u29992?\u24615?\u30340?\u35201?\u27714?\u65292?{\b CPU} \u30340?\u33455?\u29255?\u35774?\u35745?\u24517?\u39035?\u20351?\u29992?\u36739?\u22810?\u31181?\u31867?\u30340?\u21407?\u20214?\u20197?\u22686?\u21152?\u20854?\u21151?\u33021?\u65292?\u21516?\u26102?\u25918?\u24323?\u37096?\u20998?\u20855?\u26377?\u22797?\u26434?\u21151?\u33021?\u30340?\u20803?\u20214?\u25968?\u37327?\u65292?\u32780? {\b GPU} \u30340?\u33455?\u29255?\u35774?\u35745?\u21017?\u26159?\u36890?\u36807?\u31227?\u38500?\u37096?\u20998?\u20855?\u26377?\u22797?\u26434?\u21151?\u33021?\u30340?\u20803?\u20214?\u26469?\u25442?\u21462?\u26356?\u22810?\u30340?\u31354?\u38388?\u65292?\u24182?\u38598?\u25104?\u26356?\u22810?\u30340?\u22522?\u26412?\u21151?\u33021?\u20803?\u20214?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/process.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b GPU} \u35774?\u22791?\u30001?\u22810?\u20010?{\b \u27969?\u22810?\u22788?\u29702?\u22120?}\u65288?Streaming Multiprocessor\u65289?\u30340?{\b \u22788?\u29702?\u22120?\u38598?\u32676?}\u65288?Processor Cluster\u65289?\u32452?\u25104?\u12290?\u27599?\u20010?{\b \u27969?\u22810?\u22788?\u29702?\u22120?}\u37117?\u20851?\u32852?\u19968?\u20010?{\b \u25511?\u21046?\u21333?\u20803?} \u21644? L1 Cache\u65292?\u36825?\u26679?\u30340?\u35774?\u35745?\u20351?\u24471?\u19968?\u20010?\u33455?\u29255?\u21487?\u20197?\u21516?\u26102?\u25903?\u25345?\u19978?\u30334?\u20010?\u25351?\u20196?\u27969?\u30340?\u24182?\u34892?\u25191?\u34892?\u65307?\u36890?\u24120?\u19968?\u20010?{\b \u27969?\u22810?\u22788?\u29702?\u22120?}\u22312?\u19982?\u20840?\u23616? GDDR-5 \u20869?\u23384?\u20132?\u25442?\u25968?\u25454?\u20043?\u21069?\u37117?\u20250?\u21033?\u29992?\u19982?\u20043?\u20851?\u32852? L1 Cache \u21644? L2 Cache \u26469?\u20943?\u23569?\u25968?\u25454?\u20256?\u36755?\u30340?\u24310?\u36831?\u65307?\u32780?\u21448?\u22240?\u20026? {\b GPU} \u36890?\u24120?\u25317?\u26377?\u36275?\u22815?\u22823?\u30340?\u35745?\u31639?\u37327?\u65292?\u20351?\u24471?\u20854?\u19981?\u38656?\u35201?\u19982? {\b CPU} \u19968?\u26679?\u38750?\u24120?\u39057?\u32321?\u22320?\u20174?\u20869?\u23384?\u20013?\u33719?\u21462?\u25968?\u25454?\u65292?\u22240?\u27492? {\b GPU} \u30340?\u32531?\u23384?\u23618?\u19968?\u33324?\u26159?\u23567?\u20110? {\b CPU} \u30340?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/cpu-gpu.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u19982? CPU \u30456?\u27604?\u65292?GPU \u21487?\u20197?\u20351?\u29992?\u36739?\u23569?\u19988?\u30456?\u23545?\u36739?\u23567?\u30340?\u20869?\u23384?\u32531?\u23384?\u23618?\u12290?\u21407?\u22240?\u26159? GPU \u20855?\u26377?\u26356?\u22810?\u30340?\u19987?\u29992?\u20110?\u35745?\u31639?\u30340?\u26230?\u20307?\u31649?\u65292?\u36825?\u24847?\u21619?\u30528?\u23427?\u26080?\u38656?\u25285?\u24515?\u20174?\u20869?\u23384?\u20013?\u33719?\u21462?\u25968?\u25454?\u38656?\u35201?\u22810?\u38271?\u26102?\u38388?\u12290?\u21482?\u35201? GPU \u25317?\u26377?\u36275?\u22815?\u30340?\u35745?\u31639?\u37327?\u65292?\u23601?\u21487?\u20197?\u25513?\u30422?\u28508?\u22312?\u30340?\u20869?\u23384?\u35775?\u38382? \u8220"\u31561?\u24453?\u26102?\u38388?\u8221"\u65292?\u20174?\u32780?\u20351?\u20854?\u20445?\u25345?\u32321?\u24537?\u29366?\u24577?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/gpu-vs-cpu.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 2 \u27010?\u24565?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 2.1 \u35775?\u23384?\u27169?\u22411?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u20849?\u20139?\u20869?\u23384?\u27169?\u22411?\u30340?\u30340?\u35745?\u31639?\u26426?\u20013?\u36890?\u24120?\u26377?\u38750?\u24120?\u22810?\u30340?\u20869?\u26680?\u65292?\u27599?\u20010?\u20869?\u26680?\u37117?\u26377?\u26412?\u22320?\u30340?\u22788?\u29702?\u22120?\u21644?\u32531?\u23384?\u65307?\u30456?\u23545?\u30340?\u65292?\u22312?\u20114?\u32852?\u32593?\u32476?\u19978?\u25110?\u20854?\u23427?\u32467?\u28857?\u20013?\u30340?\u22788?\u29702?\u22120?\u21644?\u23384?\u20648?\u19968?\u33324?\u31216?\u20026?\u20840?\u23616?\u30340?\u65307?\u26681?\u25454?\u19981?\u21516?\u30340?\u20114?\u32852?\u32593?\u32476?\u21644?\u35775?\u38382?\u23384?\u20648?\u22120?\u30340?\u26041?\u24335?\u65292?\u19968?\u20010?\u20849?\u20139?\u20869?\u23384?\u26426?\u22120?\u21487?\u20197?\u34987?\u20998?\u20026?\u20197?\u19979?\u20960?\u31867?\u65306?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab Uniform Memory Access\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u22343?\u21248?\u23384?\u20648?\u35775?\u38382?}\u65288?Uniform Memory Access, UMA\u65289?\u27169?\u22411?\u30340?\u29305?\u28857?\u26159?\u25152?\u26377?\u30340?\u22788?\u29702?\u22120?\u37117?\u25317?\u26377?\u26412?\u22320?\u30340?\u39640?\u36895?\u32531?\u23384?\u65288?L1 Cache, L2 Cache\u65289?\u65292?\u25152?\u26377?\u30340?\u22788?\u29702?\u22120?\u37117?\u22343?\u21248?\u22320?\u20849?\u20139?\u29289?\u29702?\u23384?\u20648?\u65288?Memory\u65289?\u65292?\u24182?\u19988?\u27599?\u19968?\u20010?\u22788?\u29702?\u22120?\u35775?\u38382?\u20219?\u20309?\u23384?\u20648?\u23383?\u37117?\u38656?\u35201?\u30456?\u21516?\u30340?\u26102?\u38388?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/uma.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab Non-Uniform Memory Access\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u38750?\u22343?\u21248?\u23384?\u20648?\u35775?\u38382?}\u65288?Non-Uniform Memory Access, NUMA\u65289?\u27169?\u22411?\u30340?\u20849?\u20139?\u23384?\u20648?\u22120?\u22312?\u29289?\u29702?\u19978?\u26159?\u20998?\u24067?\u24335?\u30340?\u65292?\u25152?\u26377?\u30340?\u26412?\u22320?\u23384?\u20648?\u22120?\u26500?\u25104?\u20102?\u20840?\u23616?\u22320?\u22336?\u31354?\u38388?\u65307?\u22788?\u29702?\u22120?\u22312?\u35775?\u38382?\u26412?\u22320?\u23384?\u20648?\u22120?\u26102?\u30340?\u36895?\u24230?\u27604?\u35775?\u38382?\u20840?\u23616?\u23384?\u20648?\u22120?\u65288?\u20849?\u20139?\u23384?\u20648?\u22120?\u65292?\u25110?\u20854?\u20182?\u22788?\u29702?\u22120?\u30340?\u26412?\u22320?\u23384?\u20648?\u22120?\u65289?\u24555?\u65292?\u22788?\u29702?\u22120?\u35775?\u38382?\u20869?\u23384?\u30340?\u26102?\u38388?\u21462?\u20915?\u20110?\u20869?\u23384?\u30456?\u23545?\u20110?\u22788?\u29702?\u22120?\u30340?\u20301?\u32622?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u19981?\u21516?\u30340?\u22788?\u29702?\u22120?\u35775?\u38382?\u20849?\u20139?\u23384?\u20648?\u22120?\u26102?\u65292?\u20301?\u32622?\u30340?\u19981?\u21516?\u20250?\u23548?\u33268?\u35775?\u38382?\u24310?\u36831?\u12290?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab Cache-Only Memory Architecture\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u39640?\u36895?\u32531?\u23384?\u23384?\u20648?\u32467?\u26500?}\u65288?Cache-Only Memory Architecture, COMA\u65289?\u26159?\u23558? NUMA \u20013?\u30340?\u20998?\u24067?\u23384?\u20648?\u22120?\u25442?\u25104?\u20102?\u39640?\u36895?\u32531?\u23384?\u65292?\u27599?\u20010?\u22788?\u29702?\u22120?\u19978?\u27809?\u26377?\u23384?\u20648?\u23618?\u27425?\u32467?\u26500?\u65292?\u25152?\u26377?\u30340?\u39640?\u36895?\u32531?\u23384?\u20849?\u21516?\u26500?\u25104?\u20102?\u20840?\u23616?\u22320?\u22336?\u31354?\u38388?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/numa.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 2.2 Flynn \u20998?\u31867?\u27861?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Flynn \u20998?\u31867?\u27861?}\u65288?Flynn's Taxonomy\u65289?\u26159?\u19968?\u31181?\u39640?\u25928?\u33021?\u35745?\u31639?\u26426?\u30340?\u20998?\u31867?\u26041?\u24335?\u65292?\u20182?\u26681?\u25454?\u25351?\u20196?\u21644?\u25968?\u25454?\u30340?\u25191?\u34892?\u26041?\u24335?\u23558?\u35745?\u31639?\u26426?\u31995?\u32479?\u20998?\u25104?\u20102?\u22235?\u31867?\u65306?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab {\b \u21333?\u25351?\u20196?\u21333?\u25968?\u25454?\u27169?\u22411?}\u65288?Single Instruction Single Data, SISD\u65289?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u19968?\u33324?\u26469?\u35828?\u20855?\u26377?\u21333?\u26680? CPU \u65288?\u19981?\u35752?\u35770?\u36229?\u32447?\u31243?\u25216?\u26415?\u65289?\u30340?\u35745?\u31639?\u26426?\u23601?\u26159?\u22522?\u20110?\u21333?\u25351?\u20196?\u21333?\u25968?\u25454?\u27169?\u22411?\u30340?\u65292?\u23545?\u20110?\u27599?\u19968?\u20010? CPU \u26102?\u38047?\u65292?CPU \u25353?\u29031? {\b Fetch}\u65288?\u20174?\u23492?\u23384?\u22120?\u20013?\u33719?\u21462?\u25968?\u25454?\u65289?\u65292?{\b Decode}\u65288?\u35299?\u30721?\u65289?\u65292?{\b Execute}\u65288?\u25191?\u34892?\u24182?\u23558?\u32467?\u26524?\u20445?\u23384?\u22312?\u21478?\u19968?\u20010?\u23492?\u23384?\u22120?\u20013?\u65289?\u30340?\u27493?\u39588?\u39034?\u24207?\u25191?\u34892?\u25351?\u20196?\u65307?\u19978?\u20010?\u19990?\u32426?\u30340?\u35745?\u31639?\u26426?\u20960?\u20046?\u37117?\u26159? SISD \u27169?\u22411?\u30340?\u12290? \par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab {\b \u21333?\u25351?\u20196?\u22810?\u25968?\u25454?\u27169?\u22411?}\u65288?Single Instruction Multi Data, SIMD\u65289?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u21333?\u20010?\u25511?\u21046?\u21333?\u20803?\u25317?\u26377?\u22810?\u20010?\u22788?\u29702?\u22120?\u65292?\u36825?\u20123?\u22788?\u29702?\u22120?\u19978?\u36816?\u34892?\u30340?\u32447?\u31243?\u20849?\u20139?\u21516?\u19968?\u20010?\u25351?\u20196?\u27969?\u65292?\u23454?\u29616?\u20102?\u26102?\u38388?\u19978?\u30340?\u24182?\u34892?\u65307?{\b GPU} \u23601?\u26159?\u20856?\u22411?\u30340? SIMD \u27169?\u22411?\u12290?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab {\b \u22810?\u25351?\u20196?\u21333?\u25968?\u25454?\u27169?\u22411?}\u65288?Multi Instruction Single Data, MISD\u65289?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u22810?\u20010?\u22788?\u29702?\u22120?\u20998?\u21035?\u25317?\u26377?\u33258?\u24049?\u30340?\u25511?\u21046?\u21333?\u20803?\u24182?\u20849?\u20139?\u21516?\u19968?\u20010?\u20869?\u23384?\u21333?\u20803?\u65292?\u24212?\u29992?\u22330?\u26223?\u36739?\u23569?\u12290?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab {\b \u22810?\u25351?\u20196?\u22810?\u25968?\u25454?\u27169?\u22411?}\u65288?Multi Instruction Multi Data, MIMD\u65289?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u22810?\u20010?\u25511?\u21046?\u21333?\u20803?\u24322?\u27493?\u22320?\u25511?\u21046?\u22810?\u20010?\u22788?\u29702?\u22120?\u65292?\u21516?\u26102?\u22788?\u29702?\u22120?\u21487?\u20197?\u22312?\u19981?\u21516?\u30340?\u25968?\u25454?\u19978?\u36816?\u34892?\u19981?\u21516?\u30340?\u31243?\u24207?\u65292?\u19968?\u33324?\u36890?\u36807?\u32447?\u31243?\u25110?\u36827?\u31243?\u23618?\u38754?\u30340?\u24182?\u34892?\u26469?\u23454?\u29616?\u65292?\u20174?\u32780?\u23454?\u29616?\u31354?\u38388?\u19978?\u30340?\u24182?\u34892?\u12290?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 2.3 \u21152?\u36895?\u27604?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u21152?\u36895?\u27604?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u21152?\u36895?\u27604?}\u65288?Speedup\u65289?\u29992?\u20110?\u34913?\u37327?\u25105?\u20204?\u29616?\u22312?\u20351?\u29992?\u30340?\u24182?\u34892?\u31639?\u27861?\u27604?\u20018?\u34892?\u31639?\u27861?\u24555?\u20102?\u22810?\u23569?\u65292?\u20063?\u23601?\u26159?\u23558?\u31243?\u24207?\u24182?\u34892?\u21270?\u20043?\u21518?\u25552?\u21319?\u30340?\u25928?\u29575?\u65292?\u20854?\u20844?\u24335?\u26159?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://wikimedia.org/api/rest_v1/media/math/render/svg/12969586a2fdf3b8fb2790862fb302d34ed80ef8]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u20854?\u20013? p \u20195?\u34920? CPU \u25968?\u37327?\u65292?T{\i 1 \u20195?\u34920?\u20351?\u29992?\u20018?\u34892?\u31639?\u27861?\u30340?\u25191?\u34892?\u26102?\u38388?\u65292?T}p \u20195?\u34920?\u24403?\u26377? p \u20010?\u22788?\u29702?\u22120?\u26102?\u20351?\u29992?\u24182?\u34892?\u31639?\u27861?\u30340?\u25191?\u34892?\u26102?\u38388?\u65307?\u24403? S{\i p == p \u65292?\u21363? T}1 == p * T{\i p \u26102?\u65292?S}p \u31216?\u20026?{\b \u32447?\u24615?\u21152?\u36895?\u27604?}\u65288?Linear Speedup\u65289?\u12290?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u38463?\u22982?\u36798?\u23572?\u23450?\u24459?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://wikimedia.org/api/rest_v1/media/math/render/svg/802d81994fc3721b8ec7097664cc267a42c50a17]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u38463?\u22982?\u36798?\u23572?\u23450?\u24459?}\u65288?Amdahl's law\u65289?\u29992?\u20110?\u20272?\u35745?\u31243?\u24207?\u21487?\u20197?\u36798?\u21040?\u30340?\u26368?\u22823?\u21152?\u36895?\u27604?\u65292?W{\i s \u21644? W}p \u20998?\u21035?\u34920?\u31034?\u31243?\u24207?\u20018?\u34892?\u37096?\u20998?\u21644?\u24182?\u34892?\u37096?\u20998?\u25152?\u21344?\u30340?\u30334?\u20998?\u27604?\u65292?W{\i s + W}p \u34920?\u31034?\u31243?\u24207?\u20018?\u34892?\u25191?\u34892?\u30340?\u26102?\u38388?\u65288?\u27492?\u26102?\u24182?\u34892?\u37096?\u20998? W{\i p \u30456?\u24403?\u20110?\u34987?\u21333?\u20010?\u22788?\u29702?\u22120?\u25191?\u34892?\u65289?\u65292?W}s + W{\i p/p \u34920?\u31034?\u31243?\u24207?\u20351?\u29992? p \u20010?\u22788?\u29702?\u22120?\u25191?\u34892?\u30340?\u26102?\u38388?\u65307?\u24403? p -> \u8734? \u26102?\u65292?\u20854?\u19978?\u38480?\u26159? (W}s + W{\i p) / W}s\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 for (int i = 0; i < 1000000000; ++i) std::this_thread::sleep_for(std::chrono::seconds(1));   // sequential\line
for (int i = 0; i < 1000000000; ++i) std::this_thread::sleep_for(std::chrono::seconds(1));   // parallel\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/amdahl's-law.png]\cf0} \par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u21476?\u26031?\u22612?\u22827?\u26862?\u23450?\u24459?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u21476?\u26031?\u22612?\u22827?\u26862?\u23450?\u24459?}\u65288?Gustafson's Law\u65289?\u36890?\u36807?\u20351?\u29992? \u26469?\u25551?\u36848?\u21152?\u36895?\u27604?\u65292?p \u20195?\u34920?\u22788?\u29702?\u22120?\u30340?\u25968?\u37327?\u65292?a \u20195?\u34920?\u31243?\u24207?\u20018?\u34892?\u21270?\u30340?\u37096?\u20998?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/gustafson.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u38463?\u22982?\u36798?\u23572?\u23450?\u24459?\u25551?\u36848?\u30340?\u26159?\u22686?\u21152?\u22788?\u29702?\u36215?\u30340?\u25968?\u37327?\u24182?\u19981?\u19968?\u23450?\u33021?\u25552?\u39640?\u21152?\u36895?\u27604?\u65292?\u21482?\u26377?\u22686?\u21152?\u31243?\u24207?\u24182?\u34892?\u37096?\u20998?\u30340?\u27604?\u20363?\u65292?\u25165?\u33021?\u25552?\u39640?\u21152?\u36895?\u27604?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u21476?\u26031?\u22612?\u22827?\u26862?\u23450?\u24459?\u25551?\u36848?\u30340?\u26159?\u38543?\u30528?\u31243?\u24207?\u24182?\u34892?\u21270?\u27604?\u20363?\u30340?\u25552?\u39640?\u65292?\u21152?\u36895?\u27604?\u19982?\u22788?\u29702?\u22120?\u20010?\u25968?\u25104?\u27491?\u27604?\u30340?\u27604?\u20363?\u65288?\u26012?\u29575?\u65289?\u20063?\u22312?\u22686?\u21152?\u12290?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u24615?\u33021?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u24615?\u33021?}\u65288?Efficiency\u65289?\u26159?\u30001?\u21152?\u36895?\u27604?\u27966?\u29983?\u20986?\u30340?\u37327?\u24230?\u24615?\u33021?\u30340?\u25351?\u26631?\u65292?\u23427?\u21487?\u20197?\u34920?\u31034?\u27599?\u20010?\u22788?\u29702?\u22120?\u30340?\u21152?\u36895?\u27604?\u65292?\u21363?\u27599?\u20010?\u22788?\u29702?\u22120?\u22312?\u36825?\u20010?\u31639?\u27861?\u20013?\u30340?\u21033?\u29992?\u29575?\u65292?\u20854?\u20844?\u24335?\u26159?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://wikimedia.org/api/rest_v1/media/math/render/svg/342639d7dd0f770cb19e1baca436894ea11d5712]\cf0}\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u26102?\u38047?\u21152?\u36895?\u27604?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 S(p) = t{\i s / t}p\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b \u26102?\u38047?\u21152?\u36895?\u27604?}\u65288?Speedup in Wall-Clock Time\u65289?\u30340?\u20844?\u24335?\u24456?\u31616?\u21333?\u65292?\u29992?\u20351?\u29992?\u20018?\u34892?\u31639?\u27861?\u33457?\u36153?\u30340?\u26102?\u38047?\u26102?\u38388?\u38500?\u20197?\u20351?\u29992?\u24182?\u34892?\u31639?\u27861?\u33457?\u36153?\u30340?\u26102?\u38047?\u26102?\u38388?\u21363?\u21487?\u65292?\u20294?\u26159?\u22240?\u20026?\u26102?\u38047?\u26102?\u38388?\u21253?\u25324?\u20102?\u32593?\u32476?\u24310?\u36831?\u65292?IO\u65292?\u32531?\u23384?\u20105?\u29992?\u31561?\u26080?\u20851?\u22240?\u32032?\u65292?\u25152?\u20197?\u23427?\u19982?\u21152?\u36895?\u27604?\u21644?\u31639?\u27861?\u30340?\u22797?\u26434?\u24230?\u24182?\u19981?\u30456?\u20851?\u65292?\u21482?\u33021?\u29992?\u20110?\u31895?\u30053?\u22320?\u34913?\u37327?\u21152?\u36895?\u27604?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 3 \u24182?\u34892?\u35745?\u31639?\u26694?\u26550?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 3.1 OpenMP\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b OpenMP}\u65288?Open Multi-Processing\u65289?\u26159?\u19968?\u22871?\u38024?\u23545?\u22810?\u22788?\u29702?\u22120?{\b \u20849?\u20139?\u20869?\u23384?}\u26426?\u22120?\u36827?\u34892?\u22810?\u32447?\u31243?\u24182?\u34892?\u32534?\u31243?\u30340? API\u65292?\u25903?\u25345?\u30340?\u35821?\u35328?\u26377? C\u65292?C++ \u21644? Fortran\u65292?\u25903?\u25345?\u30340?\u32534?\u35793?\u22120?\u26377?\u29616?\u22312?\u20027?\u27969?\u30340? GCC \u21644? Clang \u31561?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 OpenMP \u25552?\u20379?\u20102?\u29992?\u20110?\u25551?\u36848?\u24182?\u34892?\u32534?\u31243?\u30340?\u39640?\u23618?\u25277?\u35937?\u65292?\u20351?\u29992? OpenMP \u26368?\u22823?\u30340?\u22909?\u22788?\u22312?\u20110?\u65292?\u24403?\u25105?\u20204?\u27809?\u26377?\u22312?\u32534?\u35793?\u30340?\u26102?\u20505?\u21152?\u19978? OpenMP \u30456?\u20851?\u30340?\u36873?\u39033?\u65292?\u25110?\u24403?\u32534?\u35793?\u22120?\u19981?\u25903?\u25345? OpenMp \u26102?\u65292?\u31243?\u24207?\u20173?\u28982?\u21487?\u20197?\u23436?\u25104?\u32534?\u35793?\u65292?\u24182?\u20351?\u29992?\u20018?\u34892?\u30340?\u27969?\u31243?\u27491?\u24120?\u22320?\u36816?\u34892?\u65307?\u36825?\u22312?\u24456?\u22823?\u31243?\u24230?\u19978?\u38477?\u20302?\u20102?\u24182?\u34892?\u32534?\u31243?\u30340?\u38590?\u24230?\u65292?\u20351?\u24471?\u25105?\u20204?\u21487?\u20197?\u25226?\u26356?\u22810?\u30340?\u31934?\u21147?\u25237?\u20837?\u21040?\u24182?\u34892?\u31639?\u27861?\u26412?\u36523?\u65292?\u32780?\u38750?\u20854?\u23454?\u29616?\u32454?\u33410?\u65307?\u23588?\u20854?\u23545?\u22522?\u20110?\u25968?\u25454?\u38598?\u36827?\u34892?\u24182?\u34892?\u21010?\u20998?\u30340?\u31243?\u24207?\u65292?OpenMP\u26159?\u19968?\u20010?\u24456?\u22909?\u30340?\u36873?\u25321?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Directive\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u25152?\u26377?\u30340? OpenMP \u32534?\u31243?\u25805?\u20316?\u37117?\u26159?\u22522?\u20110? #pragma omp \u23439?\u25351?\u20196?\u65288?directive\u65289?\u30340?\u65292?\u27599?\u20010? directive \u37117?\u20250?\u34987?\u36716?\u25442?\u20026?\u19982?\u20854?\u30456?\u24212?\u30340? OpenMP \u24211?\u20989?\u25968?\u35843?\u29992?\u65292?\u32780? OpenMP \u20250?\u22788?\u29702?\u19982?\u32447?\u31243?\u32447?\u31243?\u35843?\u29992?\u30456?\u20851?\u30340?\u25805?\u20316?\u65292?\u21253?\u25324?\u32447?\u31243?\u30340? fork, join, synchronizing \u31561?\u65292?\u19979?\u38754?\u26159?\u19968?\u20010?\u31616?\u21333?\u30340?\u20363?\u23376?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #include <omp.h>\line
#include <iostream>\line
 \line
int main()\line
\{\line
   #pragma omp parallel\line
   \{\line
       int tid\{ omp_get_thread_num() \};\line
       printf("Hello world from thread %d\\n", tid);\line
\line
       int thread_num\{ omp_get_num_threads() \};\line
       if (tid == thread_num - 1)\line
       \{\line
           printf("tid: %d, thread_num: %d\\n", tid, thread_num);\line
       \}\line
   \}\line
    return 0;\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u27880?\u24847?\u38142?\u25509?\u30340?\u26102?\u20505?\u38656?\u35201?\u21152?\u19978? -fopenmp\u65292?\u36825?\u26159?\u19968?\u20010?\u39640?\u23618?\u32423?\u30340?\u26631?\u24535?\u65292?\u20854?\u20316?\u29992?\u20027?\u35201?\u26159?\u38142?\u25509? gomp \u24211?\u65288?GCC \u30340? OpenMP \u23454?\u29616?\u65292?\u22914?\u26524?\u20351?\u29992? clang \u36827?\u34892?\u32534?\u35793?\u21017?\u20250?\u38142?\u25509? llvm \u23545?\u24212?\u30340?\u23454?\u29616?\u65292?\u31867?\u20284?\u20110? libstdc++ \u21644? libc++ \u30340?\u21306?\u21035?\u65289?\u65292?OpenMP \u36890?\u24120?\u26159?\u22522?\u20110? pthread \u23454?\u29616?\u30340?\u65292?\u25152?\u20197? gomp \u24211?\u36824?\u20250?\u38142?\u25509?\u26356?\u22810?\u30340?\u24211?\u26469?\u20351?\u29992?\u25805?\u20316?\u31995?\u32479?\u30340?\u32447?\u31243?\u21151?\u33021?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [joelzychen@DevCloud ~/parallel-computing]$ g++ -std=c++11 -g -o openmp-case openmp-case.cpp -fopenmp\line
[joelzychen@DevCloud ~/parallel-computing]$ ./openmp-case \line
Hello world from thread 5\line
Hello world from thread 2\line
Hello world from thread 1\line
Hello world from thread 3\line
Hello world from thread 7\line
tid: 7, thread_num: 8\line
Hello world from thread 4\line
Hello world from thread 0\line
Hello world from thread 6\par}
{\pard \ql \f0 \sa180 \li0 \fi0 omp{\i get}thread{\i num() \u21644? omp}get{\i num}threads() \u20004?\u20010?\u20989?\u25968?\u30340?\u21517?\u31216?\u38750?\u24120?\u30452?\u30333?\u65292?\u20998?\u21035?\u33719?\u21462?\u20102?\u24403?\u21069?\u32447?\u31243?\u30340? ID\u65288?\u36825?\u20010? ID \u26159? OpenMP \u31649?\u29702?\u30340?\u65292?\u24182?\u19981?\u26159? PID\u65289?\u21644?\u24635?\u30340?\u32447?\u31243?\u25968?\u65307?#pragma omp parallel \u26159?\u26368?\u22522?\u26412?\u30340? directive\u65292?\u23427?\u21487?\u20197?\u21551?\u21160?\u19968?\u32452?\u32447?\u31243?\u24182?\u35753?\u20182?\u20204?\u24182?\u34892?\u22320?\u25191?\u34892?\u65292?\u22914?\u26524?\u25105?\u20204?\u27809?\u26377?\u22312?\u20351?\u29992? #pragma omp parallel \u36825?\u20010? directive \u30340?\u26102?\u20505?\u25351?\u23450?\u32447?\u31243?\u25968?\u37327?\u65292?\u37027?\u20040?\u40664?\u35748?\u20250?\u21551?\u21160?\u31561?\u21516?\u20110? CPU \u26680?\u24515?\u25968?\u37327?\u30340?\u32447?\u31243?\u25968?\u65307?\u24182?\u19988?\u30001?\u20110?\u31243?\u24207?\u26159?\u24182?\u34892?\u22320?\u25191?\u34892?\u30340?\u65292?\u25152?\u20197?\u25105?\u20204?\u24182?\u19981?\u33021?\u20445?\u35777?\u31243?\u24207?\u25191?\u34892?\u30340?\u39034?\u24207?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Example\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u20877?\u30475?\u19968?\u20010?\u20363?\u23376?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #include <omp.h>\line
#include <iostream>\line
#include <thread>\line
#include <chrono>\line
\line
constexpr int thread_num = 3;\line
using namespace std; \line
\line
int main()\line
\{\line
    std::chrono::steady_clock::time_point time_begin = std::chrono::steady_clock::now();\line
\line
#pragma omp parallel for schedule(static) num_threads(thread_num)\line
    for (int i = 0; i < thread_num; ++i)    std::this_thread::sleep_for(std::chrono::seconds(1));\line
\line
    std::chrono::steady_clock::time_point time_end = std::chrono::steady_clock::now();\line
    cout << "time: " << std::chrono::duration_cast<std::chrono::milliseconds>(time_end - time_begin).count() << " ms" << endl;\line
\line
    return 0;\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [joelzychen@DevCloud ~/parallel-computing]$ g++ -std=c++11 -g -o openmp-case openmp-case.cpp -fopenmp\line
[joelzychen@DevCloud ~/parallel-computing]$ ./openmp-case \line
time: 1000 ms\line
[joelzychen@DevCloud ~/parallel-computing]$ g++ -std=c++11 -g -o openmp-case openmp-case.cpp\line
[joelzychen@DevCloud ~/parallel-computing]$ ./openmp-case \line
time: 3000 ms\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u22240?\u20026?\u26102?\u38388?\u31890?\u24230?\u21482?\u31934?\u30830?\u21040?\u20102?\u27627?\u31186?\u32423?\u65292?\u25152?\u20197?\u21482?\u33021?\u22815?\u30475?\u21040?\u22823?\u33268?\u30340?\u36816?\u34892?\u26102?\u38388?\u26159? 1s \u21644? 3s\u65307?{\f1 num_threads(thread_num)} \u29992?\u20110?\u25351?\u23450?\u32447?\u31243?\u25968?\u37327?\u65292?{\f1 schedule(static)} \u29992?\u20110?\u25351?\u23450?\u23558? {\f1 for} \u24490?\u29615?\u20013?\u30340?\u36845?\u20195?\u20197?\u38745?\u24577?\u30340?\u26041?\u24335?\u20998?\u37197?\u32473?\u22810?\u20010?\u32447?\u31243?\u65292?\u20551?\u35774?\u26377? n \u27425?\u24490?\u29615?\u36845?\u20195?\u65292?t \u20010?\u32447?\u31243?\u65292?\u37027?\u20040?\u23558?\u32473?\u27599?\u20010?\u32447?\u31243?\u38745?\u24577?\u22320?\u20998?\u37197? n/t \u27425?\u36845?\u20195?\u36827?\u34892?\u36816?\u31639?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 OpenMP \u36824?\u25552?\u20379?\u20102? barrier\u65288?\u31561?\u24453?\u25152?\u26377?\u32447?\u31243?\u25191?\u34892?\u23436?\u21069?\u38754?\u30340?\u25152?\u26377?\u35745?\u31639?\u65289?\u65292?atomic\u65288?\u21407?\u23376?\u25805?\u20316?\u65289?\u65292?flash\u65288?\u20889?\u20837?\u20869?\u23384?\u65289?\u31561?\u21508?\u31181?\u25805?\u20316?\u65307?\u20851?\u20110? OpenMP \u25152?\u26377?\u30340?\u20989?\u25968?\u21644? directive \u21487?\u20197?\u21442?\u32771? {\field{\*\fldinst{HYPERLINK "https://www.openmp.org/wp-content/uploads/OpenMP-4.5-1115-CPP-web.pdf"}}{\fldrslt{\ul
OpenMP 4.5 API C/C++ Syntax Reference Guide
}}}
\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 3.2 OpenMPI\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b OpenMPI} (Open Message Passing Interface) \u26159?\u22522?\u20110?\u28040?\u24687?\u38431?\u21015?\u36827?\u34892?\u36827?\u31243?\u38388?\u36890?\u20449?\u30340?\u24182?\u34892?\u32534?\u31243?\u24211?\u65292?MPI \u26159?\u19968?\u20010?\u36328?\u35821?\u35328?\u30340?\u36890?\u20449?\u21327?\u35758?\u65292?OpenMPI \u21482?\u26159?\u36981?\u24490?\u36825?\u31181?\u21327?\u35758?\u30340?\u19968?\u31181?\u23454?\u29616?\u65307?\u22312?\u22522?\u20110?\u28040?\u24687?\u38431?\u21015?\u30340?\u24182?\u34892?\u32534?\u31243?\u27169?\u22411?\u20013?\u65292?\u27599?\u20010?\u36827?\u31243?\u37117?\u26377?\u19968?\u20010?\u29420?\u31435?\u30340?\u22320?\u22336?\u31354?\u38388?\u65292?\u19968?\u20010?\u36827?\u31243?\u19981?\u33021?\u30452?\u25509?\u35775?\u38382?\u20854?\u20182?\u36827?\u31243?\u20013?\u30340?\u25968?\u25454?\u65292?\u32780?\u21482?\u33021?\u36890?\u36807?\u28040?\u24687?\u20256?\u36882?\u30340?\u26041?\u24335?\u26469?\u23454?\u29616?\u36827?\u31243?\u38388?\u30340?\u36890?\u20449?\u65292?\u25105?\u20204?\u38656?\u35201?\u26174?\u24335?\u22320?\u36890?\u36807?\u21457?\u36865?\u21644?\u25509?\u21463?\u28040?\u24687?\u26469?\u23454?\u29616?\u22788?\u29702?\u22120?\u20043?\u38388?\u30340?\u25968?\u25454?\u20132?\u25442?\u65307?\u20351?\u29992?\u28040?\u24687?\u38431?\u21015?\u36827?\u34892?\u36890?\u20449?\u30340?\u24320?\u38144?\u27604?\u20849?\u20139?\u20869?\u23384?\u22823?\u65292?\u22240?\u27492?\u23427?\u20027?\u35201?\u29992?\u26469?\u36827?\u34892?\u22823?\u31890?\u24230?\u24182?\u34892?\u32534?\u31243?\u30340?\u24320?\u21457?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 API\par}
{\pard \ql \f0 \sa180 \li0 \fi0 MPI \u26377?\u20960?\u20010?\u26368?\u22522?\u30784?\u30340?\u20989?\u25968?\u65292?\u22312?\u27599?\u19968?\u20010? MPI \u24182?\u34892?\u31243?\u24207?\u20013?\u20960?\u20046?\u37117?\u20250?\u29992?\u21040?\u36825?\u20960?\u20010?\u20989?\u25968?\u65306?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab {\f1 int MPI_Init (int* argc ,char** argv[] )}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u21021?\u22987?\u21270? MPI \u29615?\u22659?\u65292?\u19968?\u33324?\u26159?\u31532?\u19968?\u20010?\u34987?\u35843?\u29992?\u30340? MPI \u20989?\u25968?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab {\f1 int MPI_Finalize (void)}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u32456?\u27490? MPI \u29615?\u22659?\u65292?\u19968?\u33324?\u26159?\u26368?\u21518?\u19968?\u20010?\u34987?\u35843?\u29992?\u30340? MPI \u20989?\u25968?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab {\f1 int MPI_Comm_size (MPI_Comm comm ,int* size )}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u33719?\u21462?\u36890?\u20449?\u32452?\u36827?\u31243?\u30340?\u20010?\u25968?\u65292?{\f1 MPI_Comm comm} \u26159?\u25351?\u23450?\u30340? communicator\u65292?\u20849?\u20139?\u36890?\u20449?\u31354?\u38388?\u30340?\u19968?\u32452?\u36827?\u31243?\u32452?\u25104?\u20102?\u36890?\u20449?\u32452?\u65292?\u36890?\u20449?\u32452?\u20013?\u30340?\u25152?\u26377?\u36827?\u31243?\u30001? communicator \u31649?\u29702?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab {\f1 int MPI_Comm_rank (MPI_Comm comm ,int* rank)}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u33719?\u21462?\u24403?\u21069?\u36827?\u31243?\u22312?\u36890?\u20449?\u32452?\u20013?\u30340?\u36827?\u31243? ID\u65292?\u36825?\u20010? ID \u26159?\u30001? communicator \u31649?\u29702?\u30340?\u65292?\u19981?\u26159? PID\u65307?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Example\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u26469?\u30475?\u19968?\u20010?\u20363?\u23376?\u65292?\u23581?\u35797?\u29992? OpenMPI \u35299?\u20915? 0-1 \u32972?\u21253?\u38382?\u39064?\u65292?\u20551?\u35774?\u29289?\u21697?\u30340?\u25968?\u37327?\u26159? N\u65292?\u32972?\u21253?\u30340?\u23481?\u37327?\u26159? C\u65292?\u31532? i \u20010?\u29289?\u21697?\u30340?\u37325?\u37327?\u26159? weight[i]\u65292?\u20215?\u20540?\u20026? value[i]\u65292?\u20808?\u29992?\u24120?\u35268?\u30340?\u32447?\u24615? DP \u35299?\u20915?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #include <cstring>\line
#include <iostream>\line
#include <fstream>\line
#include <vector>\line
#include <thread>\line
#include <chrono>\line
#include <omp.h>\line
\line
using namespace std;\line
\line
int main()\line
\{\line
    std::chrono::steady_clock::time_point time_begin = std::chrono::steady_clock::now();\line
    \line
    fstream input_file("input-knapsack.txt");\line
    int N;\line
    int64_t Capacity;\line
    input_file >> N >> Capacity;\line
    int64_t weight[N], value[N];\line
    for (int i = 0; i < N; ++i)\line
        input_file >> weight[i] >> value[i];\line
    \line
\line
    vector<vector<int64_t>> dp(N + 1, vector<int64_t>(Capacity + 1));\line
    for (int i = 0; i <= N; ++i)\line
    \{\line
        #pragma omp parallel for\line
        for (int64_t j = 0; j <= Capacity; ++j)\line
        \{\line
            if (i == 0 || j == 0)\line
                dp[i][j] = 0;\line
            else if (j < weight[i - 1])\line
                dp[i][j] = dp[i - 1][j];\line
            else\line
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i - 1]] + value[i - 1]);\line
        \}\line
    \}\line
    cout << "max value: " << dp[N][Capacity] << endl;\line
\line
    std::chrono::steady_clock::time_point time_end = std::chrono::steady_clock::now();\line
    cout << "time: " << std::chrono::duration_cast<std::chrono::milliseconds>(time_end - time_begin).count() << endl;\line
    return EXIT_SUCCESS;\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u20808?\u29992?\u32972?\u21253?\u25968?\u25454?\u38543?\u26426?\u29983?\u25104?\u22120?\u65288?\u35265?\u38468?\u24405?\u65289?\u29983?\u25104?\u25968?\u25454?\u65292?\u28982?\u21518?\u32534?\u35793?\u36816?\u34892?\u65292?\u23545?\u27604?\u19968?\u19979?\u20351?\u29992? OpenMPI \u21069?\u21518?\u30340?\u32467?\u26524?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [joelzychen@DevCloud ~/parallel-computing]$ g++ -std=c++11 -g -o knapsack-generator knapsack-generator.cpp -lcrypto\line
[joelzychen@DevCloud ~/parallel-computing]$ ./knapsack-generator 1000 8000\line
[joelzychen@DevCloud ~/parallel-computing]$ g++ -std=c++11 -g -o knapsack knapsack.cpp \line
[joelzychen@DevCloud ~/parallel-computing]$ ./knapsack\line
max value: 13093\line
time: 175 ms\line
[joelzychen@DevCloud ~/parallel-computing]$ g++ -std=c++11 -g -o knapsack-openmp knapsack.cpp -fopenmp\line
[joelzychen@DevCloud ~/parallel-computing]$ ./knapsack-openmp\line
max value: 13093\line
time: 75\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u29616?\u22312?\u20351?\u29992? OpenMPI \u26469?\u25913?\u36896? 0-1 \u32972?\u21253?\u38382?\u39064?\u30340? DP \u35299?\u27861?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #include <cstring>\line
#include <iostream>\line
#include <fstream>\line
#include <vector>\line
#include <thread>\line
#include <chrono>\line
#include <mpi.h>\line
\line
using namespace std;\line
\line
int main(int argc, char *argv[])\line
\{\line
    std::chrono::steady_clock::time_point time_begin = std::chrono::steady_clock::now();\line
\line
    MPI_Init(&argc, &argv);\line
    MPI_Comm comm = MPI_COMM_WORLD;\line
    int rank, size;\line
    MPI_Comm_rank(comm, &rank);\line
    MPI_Comm_size(comm, &size);\line
    MPI_Status status;      // MPI receive\line
    MPI_Request request;    // MPI send\line
    \line
    fstream input_file("input-knapsack.txt");\line
    int N;\line
    int64_t Capacity;\line
    if (rank == 0)\line
        input_file >> N >> Capacity;\line
    MPI_Bcast(&N, 1, MPI_INT, 0, comm);\line
    MPI_Bcast(&Capacity, 1, MPI_LONG, 0, comm);\line
    MPI_Barrier(comm);\line
\line
    int64_t weight[N], value[N];\line
    if (rank == 0)\line
        for (int i = 0; i < N; ++i)\line
            input_file >> weight[i] >> value[i];\line
    MPI_Bcast(weight, N, MPI_LONG, 0, comm);\line
    MPI_Bcast(value, N, MPI_LONG, 0, comm);\line
    MPI_Barrier(comm);\line
\line
\line
    vector<vector<int64_t>> dp(N + 1, vector<int64_t>(Capacity + 1));\line
    int64_t prev_max_value;    // mpi send and receive variable\line
    \line
    for (int i = 0; i <= N; ++i)    // for each item from 0 to n\line
    \{\line
        for (int64_t j = rank; j <= Capacity; j += size)   // for each capacity from 0 to Capacity, each thread computes its own rows\line
        \{\line
            if (i == 0 || j == 0)\line
                dp[i][j] = 0;\line
            else if (j < weight[i - 1])\line
                dp[i][j] = dp[i - 1][j];\line
            else\line
            \{\line
                // int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status)\line
                MPI_Recv(&prev_max_value, 1, MPI_LONG, (j - weight[i - 1]) % size, i - 1, comm, &status);\line
                dp[i][j] = max(dp[i - 1][j], prev_max_value + value[i - 1]);\line
            \}\line
\line
            // send dp[i][j] to the next nodes that may need this curr_max_value\line
            if (i < N && weight[i] + j <= Capacity)\line
            \{\line
                // int MPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)\line
                MPI_Isend(&dp[i][j], 1, MPI_LONG, (j + weight[i]) % size, i, comm, &request);    // asynchronous operation\line
            \}\line
        \}\line
        MPI_Barrier(MPI_COMM_WORLD);\line
    \}\line
    MPI_Barrier(MPI_COMM_WORLD);\line
    \line
    if (rank == Capacity % size)\line
        printf("max value: %ld\\n", dp[N][Capacity]);\line
\line
    if (rank == 0)\line
    \{\line
        std::chrono::steady_clock::time_point time_end = std::chrono::steady_clock::now();\line
        printf("time: %ld ms\\n", std::chrono::duration_cast<std::chrono::milliseconds>(time_end - time_begin).count());\line
    \}\line
    MPI_Finalize();\line
    return EXIT_SUCCESS;\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u30456?\u27604?\u20110? OpenMP\u65292?\u20351?\u29992? OpenMPI \u35299?\u20915?\u32972?\u21253?\u38382?\u39064?\u30340?\u36807?\u31243?\u38750?\u24120?\u22797?\u26434?\u65292?\u39318?\u20808?\u35201?\u20351?\u29992? rank == 0 \u30340?\u32447?\u31243?\u22788?\u29702?\u36755?\u20837?\u65292?\u28982?\u21518?\u23558?\u36755?\u20837?\u30340? N, C \u21644? weight, value \u25968?\u32452?\u37117?\u24191?\u25773?\u32473?\u20854?\u20182?\u32447?\u31243?\u65292?\u20043?\u21518?\u24320?\u22987?\u22788?\u29702? dp \u25968?\u32452?\u65292?\u21160?\u24577?\u35268?\u21010?\u30340?\u27493?\u39588?\u20998?\u20026?\u20197?\u19979?\u20960?\u27493?\u65306?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u23545?\u20110?\u20174? 0 \u21040? n \u30340?\u27599?\u19968?\u20214?\u29289?\u21697? i \u20018?\u34892?\u25191?\u34892?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab \u23545?\u20110?\u31532? j \u20010?\u32447?\u31243?\u65288?j = rank, 0 <= j < size\u65289?\u65292?\u20351?\u20854?\u21435?\u22788?\u29702?\u23545?\u24212?\u30340? capacity (capacity == j)\u65292?\u20043?\u21518?\u35753? j += size \u22788?\u29702?\u19979?\u19968?\u20214?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab i == 0 \u25110? j == 0 \u26102?\u21021?\u22987?\u21270?\u36793?\u30028?\u20026? 0\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab \u22914?\u26524? j < weight[i - 1]\u65292?\u27492?\u26102?\u32972?\u21253?\u23481?\u37327?\u23567?\u20110? weight[i - 1]\u65292?\u37027?\u20040? dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
i
}}}
 = dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
i - 1
}}}
\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab \u22914?\u26524? j <= weight[i - 1]\u65292?\u27492?\u26102?\u32972?\u21253?\u23481?\u37327?\u22823?\u20110?\u31561?\u20110? weight[i - 1]\u65292?\u37027?\u20040?\u27492?\u26102? dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
i
}}}
 = max(dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
i - 1
}}}
, dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
i - 1
}}}
] + value[i - 1])\u65292?\u20294?\u26159?\u30001?\u20110?\u23481?\u37327?\u22823?\u23567?\u20026? j - weight[i - 1] \u26102?\u30340? dp \u32467?\u26524?\u65288?\u20063?\u23601?\u26159? dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
i - 1
}}}
]\u65289?\u19981?\u19968?\u23450?\u26159?\u30001?\u31532? j \u20010?\u32447?\u31243?\u22788?\u29702?\u30340?\u65292?\u25152?\u20197?\u26412?\u22320?\u30340? dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
i - 1
}}}
] \u19981?\u19968?\u23450?\u21547?\u26377?\u27491?\u30830?\u30340?\u20540?\u65292?\u25152?\u20197?\u38656?\u35201?\u36890?\u36807? mpi \u20174?\u31532? (j - weight[i - 1]) % size \u20010?\u32447?\u31243?\u25343?\u21040?\u23545?\u24212?\u30340?\u20540?\u65288?\u20063?\u23601?\u26159? prev{\i max}value\u65289?\u20043?\u21518?\u20877?\u20570?\u22788?\u29702?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 6.\tx360\tab \u23545?\u20110?\u19979?\u19968?\u20214?\u29289?\u21697?\u65292?\u24403?\u32972?\u21253?\u23481?\u37327?\u20026? j + weight[i] \u26102?\u21487?\u33021?\u20250?\u29992?\u21040?\u24403?\u21069?\u30340? dp \u32467?\u26524?\u65292?\u22240?\u27492?\u38656?\u35201?\u23558? dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
i
}}}
 \u21457?\u36865?\u32473?\u22788?\u29702?\u23481?\u37327?\u20026? j + weight[i] \u30340?\u31532? (j + weight[i]) % size \u20010?\u32447?\u31243?\u65307?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u26368?\u21518?\u22788?\u29702?\u32467?\u26524?\u26102?\u21482?\u38656?\u35201?\u35753?\u22788?\u29702?\u20102? dp{\field{\*\fldinst{HYPERLINK ""}}{\fldrslt{\ul
N
}}}
 \u30340?\u31532? rank = Capacity % size \u20010?\u32447?\u31243?\u36755?\u20986?\u21363?\u21487?\u65307?\u27880?\u24847?\u36825?\u20010?\u20570?\u27861?\u20250?\u26377? bug\u65292?\u22914?\u26524?\u36755?\u20837?\u20013?\u30340?\u31532? i \u20010?\u29289?\u21697?\u30340? weight[i] == 0\u65292?\u37027?\u20040?\u32447?\u31243?\u22312?\u31561?\u24453? recv \u30340?\u26102?\u20505?\u20250?\u20174?\u33258?\u24049?\u36825?\u20010?\u32447?\u31243?\u25509?\u25910?\u19968?\u20010?\u20540?\u65292?\u20174?\u32780?\u23548?\u33268?\u32467?\u26524?\u19981?\u23545?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u20351?\u29992? OpenMPI \u21069?\u20808?\u35201?\u20174?{\field{\*\fldinst{HYPERLINK "https://www.open-mpi.org/software/ompi/v4.0/"}}{\fldrslt{\ul
\u23448?\u26041?\u32593?\u31449?
}}}
\u19979?\u36733?\u28304?\u30721?\u24182?\u23433?\u35013?\u65288?\u25110?\u32773?\u36890?\u36807? yum \u23433?\u35013?\u65289?\u65292?\u28982?\u21518?\u20351?\u29992? mpic++ \u36827?\u34892?\u32534?\u35793?\u65292?\u20351?\u29992? mpirun \u36816?\u34892?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [joelzychen@DevCloud ~/parallel-computing/openmpi]$ sudo find / -name "mpic++"\line
/usr/lib64/openmpi/bin/mpic++\line
/usr/lib64/mpich/bin/mpic++\line
[joelzychen@DevCloud ~/parallel-computing]$ /usr/lib64/mpich/bin/mpic++ -g -std=c++11 -o knapsack-openmpi knapsack-openmpi.cpp \line
[joelzychen@DevCloud ~/parallel-computing]$ /usr/lib64/mpich/bin/mpirun -n 1 ./knapsack-openmpi\line
max value: 13093\line
time: 6694 ms\line
[joelzychen@DevCloud ~/parallel-computing]$ /usr/lib64/mpich/bin/mpirun -n 2 ./knapsack-openmpi\line
max value: 13093\line
time: 4863 ms\line
[joelzychen@DevCloud ~/parallel-computing]$ /usr/lib64/mpich/bin/mpirun -n 4 ./knapsack-openmpi\line
max value: 13093\line
time: 3674 ms\line
[joelzychen@DevCloud ~/parallel-computing]$ /usr/lib64/mpich/bin/mpirun -n 8 ./knapsack-openmpi\line
max value: 13093\line
time: 2487 ms\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u27178?\u21521?\u27604?\u36739? OpenMPI \u21644? \u20018?\u34892?\u31639?\u27861?\u65292?\u22312?\u20351?\u29992? OpenMPI \u20570? DP \u30340?\u26102?\u20505?\u22240?\u20026?\u22312?\u28040?\u24687?\u20256?\u36755?\u20013?\u28010?\u36153?\u20102?\u24456?\u22810?\u26102?\u38388?\u65292?\u20854?\u25928?\u29575?\u29978?\u33267?\u19981?\u22914?\u20018?\u34892?\u31639?\u27861?\u65307?\u20294?\u22914?\u26524?\u20351?\u29992?\u31351?\u20030?\u31639?\u27861?\u35299? 0-1 \u32972?\u21253?\u65288?\u22312? OJ \u37324?\u20250?\u36229?\u26102?\u30340?\u37027?\u31181?\u65289?\u65292?\u20877?\u29992? OpenMPI \u20248?\u21270?\u30340?\u35805?\u65292?\u25928?\u29575?\u20250?\u26377?\u38750?\u24120?\u22823?\u30340?\u25552?\u21319?\u65292?\u26377?\u20852?\u36259?\u30340?\u21516?\u23398?\u21487?\u20197?\u33258?\u24049?\u20102?\u35299?\u19968?\u19979?\u65307?\u32437?\u21521?\u27604?\u36739?\u24320?\u21551?\u19981?\u21516?\u32447?\u31243?\u25968?\u37327?\u30340? OpenMPI \u31639?\u27861?\u65292?\u25105?\u20204?\u22312?\u25910?\u21457?\u28040?\u24687?\u25968?\u37327?\u19981?\u21464?\u30340?\u24773?\u20917?\u19979?\u25552?\u21319?\u20102?\u21516?\u26102?\u36827?\u34892?\u36816?\u31639?\u30340?\u32447?\u31243?\u25968?\u37327?\u65292?\u22240?\u27492?\u26126?\u26174?\u22320?\u25552?\u39640?\u20102?\u25928?\u29575?\u65307?\u20851?\u20110? OpenMPI \u30340?\u25152?\u26377?\u20989?\u25968?\u21487?\u20197?\u26597?\u38405? {\field{\*\fldinst{HYPERLINK "https://www.open-mpi.org/doc/current/"}}{\fldrslt{\ul
Open MPI v4.0.4 documentation
}}}
\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 3.3 CUDA\par}
{\pard \ql \f0 \sa180 \li0 \fi0 CUDA \u30340?\u20840?\u31216?\u26159? Compute Unified Device Architecture\u65292?\u23427?\u26159?\u19968?\u20010?\u29992?\u20110?\u24182?\u34892?\u35745?\u31639?\u30340?\u24179?\u21488?\u21644? API\u65292?\u23427?\u20801?\u35768?\u24320?\u21457?\u20154?\u21592?\u20351?\u29992?{\b \u25903?\u25345? CUDA \u30340? GPU} \u36827?\u34892?\u24182?\u34892?\u32534?\u31243?\u65307?GPU \u24182?\u19981?\u33021?\u29420?\u31435?\u36827?\u34892?\u36816?\u31639?\u65292?\u23427?\u38656?\u35201?\u19982? CPU \u36890?\u36807? PCIe \u24635?\u32447?\u36830?\u25509?\u21040?\u19968?\u36215?\u21327?\u21516?\u36827?\u34892?\u24037?\u20316?\u65292?\u20351?\u29992? GPU \u36827?\u34892?\u30340?\u24182?\u34892?\u35745?\u31639?\u21487?\u20197?\u34987?\u35270?\u20026?\u26159? CPU \u21644? GPU \u30340?\u24322?\u26500?\u35745?\u31639?\u26550?\u26500?\u65292?CPU \u36127?\u36131?\u22788?\u29702?\u36923?\u36753?\u22797?\u26434?\u30340?\u20018?\u34892?\u37096?\u20998?\u65292?GPU \u36127?\u36131?\u22788?\u29702?\u25968?\u25454?\u23494?\u38598?\u30340?\u24182?\u34892?\u37096?\u20998?\u65292?\u20854?\u20013? CPU \u36890?\u24120?\u34987?\u31216?\u20026? host \u20027?\u26426?\u31471?\u65292?GPU \u36890?\u24120?\u34987?\u31216?\u20026? device \u35774?\u22791?\u31471?\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/heterogeneous-computing.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Kernel\par}
{\pard \ql \f0 \sa180 \li0 \fi0 CUDA \u20013?\u30340? {\b kernel \u26680?\u20989?\u25968?}\u26159?\u22312? GPU \u31471?\u24182?\u34892?\u25191?\u34892?\u30340?\u20989?\u25968?\u65292?\u36825?\u20010?\u20989?\u25968?\u21482?\u21253?\u21547?\u31243?\u24207?\u30340?\u24182?\u34892?\u37096?\u20998?\u65292?\u23427?\u20250?\u34987? GPU \u19978?\u30340?\u35832?\u22810?\u32447?\u31243?\u24182?\u34892?\u25191?\u34892?\u65307?\u30456?\u27604?\u20110? CPU \u19978?\u30340?\u32447?\u31243?\u65292?GPU \u19978?\u30340?\u32447?\u31243?\u26356?\u21152?\u36731?\u37327?\u32423?\u65292?\u21019?\u24314?\u30340?\u25104?\u26412?\u26356?\u23567?\u65292?\u32447?\u31243?\u20999?\u25442?\u26356?\u28789?\u27963?\u65292?\u36827?\u20837? CUDA \u26680?\u20989?\u25968?\u26102?\u31243?\u24207?\u21487?\u20197?\u23450?\u20041?\u38750?\u24120?\u22810?\u30340?\u34394?\u25311?\u32447?\u31243?\u65292?\u20294?\u33021?\u22815?\u24182?\u34892?\u25191?\u34892?\u30340?\u30828?\u20214?\u32447?\u31243?\u25968?\u20063?\u26159?\u26377?\u38480?\u30340?\u65307?\u19968?\u33324?\u26469?\u35828?\u22522?\u20110? CUDA \u31243?\u24207?\u30340?\u25191?\u34892?\u27969?\u31243?\u22914?\u19979?\u65306?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab host \u31471?\u36827?\u34892?\u20869?\u23384?\u20998?\u37197?\u21644?\u25968?\u25454?\u21021?\u22987?\u21270?\u65292?\u25191?\u34892?\u31243?\u24207?\u20018?\u34892?\u37096?\u20998?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab device \u31471?\u36827?\u34892?\u20869?\u23384?\u20998?\u37197?\u65292?\u24182?\u20174? host \u31471?\u25335?\u36125?\u25968?\u25454?\u21040? device \u31471?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab device \u31471?\u35843?\u29992?\u24182?\u25191?\u34892?\u26680?\u20989?\u25968?\u65292?\u21516?\u26102?\u20351?\u29992?\u32531?\u23384?\u25552?\u21319?\u25928?\u29575?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab device \u31471?\u23558?\u36816?\u31639?\u22909?\u30340?\u32467?\u26524?\u25335?\u36125?\u21040? host \u31471?\u19978?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab device \u31471?\u37322?\u25918?\u20869?\u23384?\u65292?\u31561?\u24453?\u19979?\u19968?\u27425?\u26680?\u20989?\u25968?\u35843?\u29992?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/simple-process-flow.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Thread Hierarchy\par}
{\pard \ql \f0 \sa180 \li0 \fi0 CUDA \u25191?\u34892?\u26680?\u20989?\u25968?\u30340?\u26102?\u20505?\u24320?\u21551?\u30340?\u32447?\u31243?\u25317?\u26377?\u19977?\u23618?\u30340?\u23618?\u32423?\u32467?\u26500?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/grid-block-thread.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab grid\par}
{\pard \ql \f0 \sa180 \li360 \fi0 grid \u26159?\u19968?\u20010?\u36923?\u36753?\u23454?\u20307?\u65292?\u21487?\u20197?\u29702?\u35299?\u20026?\u19968?\u20010?\u24037?\u20316?\u21306?\u65292?\u23427?\u36816?\u34892?\u22312?\u25972?\u20010? GPU \u19978?\u65292?\u21516?\u19968?\u20010? grid \u37324?\u30340?\u25152?\u26377? thread \u20849?\u20139?\u20840?\u23616?\u20869?\u23384?\u31354?\u38388?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab thread block\par}
{\pard \ql \f0 \sa180 \li360 \fi0 thread block \u26159?\u19968?\u32452?\u24182?\u34892?\u25191?\u34892?\u30340?\u32447?\u31243?\u65292?\u19968?\u20010? block \u22312?\u21333?\u20010? streaming multi-processor \u20013?\u36816?\u34892?\u65292?\u21363?\u19968?\u20010? block \u20013?\u30340?\u25152?\u26377? thread \u37117?\u22312?\u36825?\u20010?\u27969?\u24335?\u22810?\u22788?\u29702?\u22120?\u20013?\u36816?\u34892?\u65292?\u23427?\u20204?\u21487?\u20197?\u36890?\u36807?\u20849?\u20139?\u20869?\u23384?\u25110?\u21516?\u27493?\u21407?\u35821?\u36827?\u34892?\u36890?\u20449?\u65292?\u20301?\u20110?\u19981?\u21516?\u30340? block \u20013?\u30340? thread \u19968?\u33324?\u26469?\u35828?\u19981?\u33021?\u20114?\u30456?\u36890?\u20449?\u21644?\u21327?\u20316?\u65292?\u27599?\u19968?\u20010? block \u37117?\u24212?\u35813?\u33021?\u22815?\u29420?\u31435?\u36816?\u34892?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab thread\par}
{\pard \ql \f0 \sa180 \li360 \fi0 thread \u22312? CUDA core \u19978?\u25191?\u34892?\u65292?\u27491?\u22914?\u21069?\u25991?\u25152?\u35828?\u65292?GPU \u19978?\u30340?\u32447?\u31243?\u38750?\u24120?\u36731?\u37327?\u32423?\u65292?\u21487?\u20197?\u36890?\u36807?\u36739?\u22823?\u30340?\u23492?\u23384?\u22120?\u25552?\u20379?\u38750?\u24120?\u24555?\u36895?\u30340?\u19978?\u19979?\u25991?\u20999?\u25442?\u65288?CPU \u30340?\u32447?\u31243?\u21477?\u26564?\u23384?\u22312?\u20110?\u36739?\u20302?\u30340?\u20869?\u23384?\u23618?\u27425?\u32467?\u26500?\u20013?\u65292?\u20363?\u22914?\u39640?\u36895?\u32531?\u23384?\u65289?\u65307?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u25105?\u20204?\u22312?\u35843?\u29992?\u26680?\u20989?\u25968?\u30340?\u26102?\u20505?\u38656?\u35201?\u36890?\u36807? {\f1 <<<block, thread>>>} \u30340?\u26041?\u24335?\u26469?\u25351?\u23450? block \u21644? thread \u30340?\u25968?\u37327?\u21644?\u32500?\u24230?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Example\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u26469?\u30475?\u19968?\u20010?\u31616?\u21333?\u30340?\u20363?\u23376?\u65292?\u20808?\u20018?\u34892?\u22320?\u36827?\u34892?\u22823?\u32422? 10 \u20159?\u27425?\u21152?\u27861?\u36816?\u31639?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #include <iostream>\line
#include <cstdlib>\line
#include <cstring>\line
#include <chrono>\line
#include <thread>\line
\line
using namespace std;\line
constexpr uint64_t magic_number = 12345;\line
\line
void Add(int n, uint64_t *x)\line
\{\line
    for (int i = 0; i < n; ++i)\line
        x[i] += x[i];\line
\}\line
\line
int main(void)\line
\{\line
    int n = 1<<30;\line
    uint64_t *x = (uint64_t *)malloc(n * sizeof(uint64_t));\line
    memset(x, magic_number, sizeof(x)); \line
\line
    std::chrono::steady_clock::time_point time_begin = std::chrono::steady_clock::now();\line
    Add(n, x);\line
    std::chrono::steady_clock::time_point time_end = std::chrono::steady_clock::now();\line
    cout << "time: " << std::chrono::duration_cast<std::chrono::milliseconds>(time_end - time_begin).count() << " ms" << endl;\line
\line
    free(x);\line
    return 0;\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u20026?\u20102?\u26041?\u20415?\u23545?\u27604?\u65292?\u22312? Windows PowerShell \u20013?\u20351?\u29992? nvcc \u32534?\u35793?\u36816?\u34892?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 PS G:\\> nvcc -o add .\\add.cpp  -ccbin "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64"\line
add.cpp\line
PS G:\\> .\\add.exe\line
time: 4472 ms\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u21487?\u20197?\u30475?\u21040? Add \u20989?\u25968?\u20018?\u34892?\u25191?\u34892?\u30340?\u26102?\u38388?\u22823?\u32422?\u26159? 4472 ms\u65292?\u29616?\u22312?\u25105?\u20204?\u23558?\u20854?\u20462?\u25913?\u20026?\u20351?\u29992? CUDA \u30340?\u24182?\u34892?\u31243?\u24207?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #include <iostream>\line
#include <cstdlib>\line
#include <cstring>\line
#include <chrono>\line
#include <thread>\line
#include <string>\line
\line
using namespace std;\line
constexpr int magic_number = 12345;\line
\line
__global__ void Add(int n, int *x)\line
\{\line
    for (int i = 0; i < n; ++i)\line
        x[i] += x[i];\line
\}\line
\line
int main(void)\line
\{\line
    int n = 1<<30;\line
    int64_t byte_size = n * sizeof(int);\line
    int *x;\line
    x = (int*)malloc(byte_size);\line
    for (int i = 0; i < n; ++i)\line
        x[i] = magic_number;\line
    \line
    int *cuda_x;\line
    cudaMalloc((void**)&cuda_x, byte_size);\line
\line
    // copy from host to device\line
    cudaMemcpy(cuda_x, x, byte_size, cudaMemcpyHostToDevice);\line
\line
    std::chrono::steady_clock::time_point time_begin = std::chrono::steady_clock::now();\line
    Add<<<1, 1>>>(n, cuda_x);\line
    cudaDeviceSynchronize();\line
    std::chrono::steady_clock::time_point time_end = std::chrono::steady_clock::now();\line
    \line
    // copy from device to host\line
    cudaMemcpy(x, cuda_x, byte_size, cudaMemcpyDeviceToHost);\line
\line
    // check result\line
    bool result\{ true \};\line
    for (uint32_t i = 0; i < n; ++i)\line
        result = (result && (x[i] == magic_number + magic_number));\line
    string result_str = (result ? "true" : "false");\line
\line
    cout << "result: " << result_str << endl;\line
    cout << "time: " << std::chrono::duration_cast<std::chrono::milliseconds>(time_end - time_begin).count() << " ms" << endl;\line
    free(x);\line
    cudaFree(cuda_x);\line
    return 0;\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 PS G:\\> nvcc -o cuda-add .\\cuda-add.cu -ccbin "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64"\line
cuda-add.cu\line
   Creating library cuda-add.lib and object cuda-add.exp\line
PS G:\\> .\\cuda-add.exe  \line
result: true\line
time: 21904 ms\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u21487?\u20197?\u30475?\u21040? CUDA \u31243?\u24207?\u37324?\u26377?\u19968?\u20123?\u29305?\u27530?\u30340?\u20851?\u38190?\u23383?\u21644? API\u65306?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab {\f1 __global__} \u26159?\u26680?\u20989?\u25968?\u30340?\u26631?\u24535?\u65292?\u21482?\u35201?\u22312?\u20989?\u25968?\u31614?\u21517?\u21069?\u21152?\u19978? {\f1 __global__} \u23427?\u23601?\u21487?\u20197?\u34987? CUDA \u32534?\u35793?\u22120?\u20998?\u26512?\u20026?\u26680?\u20989?\u25968?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab \u22240?\u20026? Add \u20989?\u25968?\u26159?\u22312? device \u31471?\u36816?\u34892?\u30340?\u65292?\u25105?\u20204?\u38656?\u35201?\u20808?\u20351?\u29992? {\f1 malloc} \u21644? {\f1 cudaMalloc} \u20998?\u21035?\u20026? host \u21644? device \u31471?\u20998?\u37197?\u20869?\u23384?\u65292?\u28982?\u21518?\u20351?\u29992? {\f1 cudaMemcpy} \u23558?\u22312? host \u31471?\u21021?\u22987?\u21270?\u30340?\u25968?\u25454?\u25335?\u36125?\u21040? device \u31471?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab \u25105?\u20204?\u38656?\u35201?\u22312? device \u31471?\u35843?\u29992? Add \u26680?\u20989?\u25968?\u65292?\u36825?\u20010?\u25805?\u20316?\u23545?\u20110? host \u31471?\u26469?\u35828?\u26159?\u24322?\u27493?\u30340?\u65292?\u23427?\u19981?\u20250?\u31561?\u24453? device \u31471?\u30340?\u25191?\u34892?\u32467?\u26524?\u65292?\u25105?\u20204?\u38656?\u35201?\u35843?\u29992? {\f1 cudaDeviceSynchronize} \u20989?\u25968?\u26469?\u31561?\u24453? device \u31471?\u25191?\u34892?\u23436?\u27605?\u24182?\u36820?\u22238?\u65307?\u22914?\u26524?\u25105?\u20204?\u36830?\u32493?\u35843?\u29992?\u20102?\u22810?\u20010?\u26680?\u20989?\u25968?\u65292?\u21448?\u27809?\u26377?\u22312? device \u31471?\u25351?\u23450?\u25511?\u21046?\u27969?\u65292?\u37027?\u20040?\u36825?\u20123?\u26680?\u20989?\u25968?\u21482?\u20250?\u22312? device \u31471?\u25353?\u39034?\u24207?\u25191?\u34892?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab device \u31471?\u25191?\u34892?\u23436?\u20043?\u21518?\u65292?\u20351?\u29992? {\f1 cudaMemcpy} \u23558?\u25968?\u25454?\u20174? device \u31471?\u25335?\u36125?\u22238? host \u31471?\u36827?\u34892?\u39564?\u35777?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab \u26368?\u21518?\u20998?\u21035?\u35843?\u29992? {\f1 free} \u21644? {\f1 cudaFree} \u26469?\u37322?\u25918?\u20869?\u23384?\u65307?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u25105?\u20204?\u30340?\u31243?\u24207?\u34429?\u28982?\u36305?\u22312? GPU \u19978?\u65292?\u20294?\u36895?\u24230?\u21453?\u32780?\u27604?\u36305?\u22312? CPU \u19978?\u30340?\u26102?\u20505?\u26356?\u24930?\u20102?\u65292?\u22240?\u20026?\u25105?\u20204?\u21482?\u20026? kernel \u20998?\u37197?\u20102? 1 \u20010? block \u21644? 1 \u20010? thread ({\f1 Add<<<1,1>>>(n, x);})\u65292?\u26082?\u27809?\u26377?\u21457?\u25381? GPU \u24182?\u34892?\u35745?\u31639?\u30340?\u20248?\u21183?\u65292?\u21448?\u28010?\u36153?\u20102?\u26102?\u38388?\u22312? CPU \u21644? GPU \u30340?\u20132?\u20114?\u19978?\u65307?\u20248?\u21270?\u30340?\u26041?\u27861?\u21644? OpenMPI \u20013?\u30340?\u20363?\u23376?\u31867?\u20284?\u65292?\u21482?\u38656?\u35201?\u35753?\u27599?\u20010?\u32447?\u31243?\u22788?\u29702?\u23545?\u24212?\u33258?\u24049?\u30340?\u25968?\u25454?\u65292?\u24182?\u22312?\u24490?\u29615?\u20013?\u27599?\u27425?\u33258?\u22686?\u19968?\u20010?\u27493?\u38271?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 __global__ void Add(int n, int *cuda_x)\line
\{\line
    int index = blockIdx.x * blockDim.x + threadIdx.x;\line
    int stride = blockDim.x;\line
    for (int i = index; i < n; i += stride)\line
        cuda_x[i] += cuda_x[i];\line
\}\line
\line
int main(void)\line
\{\line
    // ...\line
    Add<<<4096, 256>>>(n, cuda_x);\line
    // ...\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u20854?\u20013?\u65306?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab blockIdx.x \u20195?\u34920? block \u30340? ID\u65292?\u21363?\u24403?\u21069? block \u30340?\u19979?\u26631?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab blockDim.x \u20195?\u34920? block \u30340?\u32500?\u24230?\u65292?\u21363?\u19968?\u20010? block \u20869?\u21547?\u26377?\u22810?\u23569?\u20010? thread\u65307?\u21516?\u26102?\u20063?\u26159?\u27493?\u38271? stride\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab \u31867?\u20284?\u30340?\u65292?threadIdx.x \u20195?\u34920? thread \u30340? ID\u65292?\u21363?\u24403?\u21069? block \u30340?\u19979?\u26631?\u65307?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab index \u26159?\u24403?\u21069?\u38656?\u35201?\u36827?\u34892?\u36816?\u31639?\u30340?\u25968?\u25454?\u22312?\u20869?\u23384?\u20013?\u30340?\u20301?\u32622?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u22312?\u36825?\u20010?\u20363?\u23376?\u20013?\u65292?\u25105?\u20204?\u24320?\u21551?\u20102? 4096 \u20010? block \u21644? 256 \u20010? thread\u65292?\u21363? blockIdx.x < 4096, blockDim.x == 256, threadIdx.x < 256\u65307?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/grid-dim.png]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u24403?\u28982?\u22914?\u26524?\u30003?\u35831?\u36807?\u22810?\u30340? block \u24182?\u19981?\u20250?\u25552?\u21319?\u36816?\u31639?\u30340?\u25928?\u29575?\u65292?\u22240?\u20026? cuda core \u20250?\u28010?\u36153?\u35768?\u22810?\u26102?\u38388?\u26469?\u35843?\u24230?\u36825?\u20123? block\u65307?\u25105?\u20204?\u21487?\u20197?\u22810?\u27425?\u20462?\u25913? {\f1 <<<block, thread>>>} \u26469?\u23545?\u27604?\u22312?\u20351?\u29992?\u19981?\u21516?\u25968?\u37327?\u30340? block \u21644? thread \u30340?\u24773?\u20917?\u19979?\u30340?\u24615?\u33021?\u65306?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Add<<<4096, 256>>>(n, x);\line
PS G:\\> nvcc -o cuda-add .\\cuda-add.cu -ccbin "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64"                                                                                      cuda-add.cu\line
   Creating library cuda-add.lib and object cuda-add.exp\line
PS G:\\> .\\cuda-add.exe\line
result: true\line
time: 159454 ms\line
\line
# Add<<<1, 256>>>(n, x);\line
PS G:\\> .\\cuda-add.exe\line
result: true\line
time: 1038 ms\line
\line
# Add<<<1, 1024>>>(n, x);\line
PS G:\\> .\\cuda-add.exe\line
result: true\line
time: 299 ms\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: https://raw.githubusercontent.com/ZintrulCre/resource/master/parallel-computing/cuda-add.gif]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u20851?\u20110? CUDA \u30340?\u26356?\u22810?\u20351?\u29992?\u35828?\u26126?\u21487?\u20197?\u21442?\u32771? {\field{\*\fldinst{HYPERLINK "https://docs.nvidia.com/cuda/"}}{\fldrslt{\ul
CUDA Toolkit Documentation
}}}
\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 4 \u24635?\u32467?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u26412?\u25991?\u20027?\u35201?\u35762?\u35299?\u20102?\u24182?\u34892?\u35745?\u31639?\u25152?\u20381?\u38468?\u30340?\u30828?\u20214?\u26550?\u26500?\u21450?\u20854?\u30456?\u20851?\u30340?\u19968?\u20123?\u27010?\u24565?\u65292?\u36890?\u36807? OpenMP, OpenMPI \u21644? CUDA \u20998?\u21035?\u31616?\u21333?\u22320?\u20171?\u32461?\u20102?\u22522?\u20110?\u20849?\u20139?\u20869?\u23384?\u65292?\u28040?\u24687?\u20256?\u36882?\u21644? GPU\u65288?\u20854?\u23454?\u20063?\u26159?\u19968?\u31181?\u20849?\u20139?\u20869?\u23384?\u24182?\u34892?\u32534?\u31243?\u65289?\u19977?\u31181?\u26041?\u27861?\u30340?\u24182?\u34892?\u32534?\u31243?\u65292?\u20851?\u20110?\u24182?\u34892?\u35745?\u31639?\u30340?\u26356?\u22810?\u24320?\u21457?\u32463?\u39564?\u36824?\u38656?\u35201?\u22312?\u23454?\u36341?\u20013?\u31215?\u32047?\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u26412?\u25991?\u25152?\u26377?\u20195?\u30721?\u22343?\u25910?\u24405?\u22312? {\field{\*\fldinst{HYPERLINK "https://github.com/ZintrulCre/parallel-computing-demo"}}{\fldrslt{\ul
https://github.com/ZintrulCre/parallel-computing-demo
}}}
\u12290?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 5 \u38468?\u24405?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 0-1 \u32972?\u21253?\u38382?\u39064?\u38543?\u26426?\u25968?\u25454?\u29983?\u25104?\u22120?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 // knapsack-generator.cpp\line
#include <iostream>\line
#include <fstream>\line
#include <openssl/rand.h>\line
\line
using namespace std;\line
\line
int main (int argc, char *argv[])\line
\{\line
    if (argc < 3)\line
    \{\line
        fprintf(stderr, "usage: %s N C\\n", argv[0]);\line
        exit(1);\line
    \}\line
    \line
    int N = stoi (argv[1]);\line
    uint64_t C = stoi (argv[2]);\line
    \line
    int m = 4 * C / N;\line
    unsigned char buff[2 * N];\line
    RAND_seed(&m, sizeof(m));\line
    RAND_bytes(buff, sizeof(buff));\line
\line
    ofstream file_stream;\line
    file_stream.open("input-knapsack.txt");\line
    file_stream << N << ' ' << C << endl;\line
    for (int i = 0; i < N; i++)\line
    \{\line
        file_stream << buff[2 * i] % m << ' ' << buff[2 * i + 1] % m << endl;;\line
    \}\line
    file_stream.close();\line
\line
    return 0;\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 \u21442?\u32771?\u25991?\u29486?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab OpenMP 4.5 API C/C++ Syntax Reference Guide. (2020). Retrieved 10 August 2020, from https://www.openmp.org/wp-content/uploads/OpenMP-4.5-1115-CPP-web.pdf\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab Open MPI v4.0.4 documentation. (2020). Retrieved 10 August 2020, from https://www.open-mpi.org/doc/current/\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab Jiaoyun, Yang & Yun, Xu & Yi, Shang. (2010). An Efficient Parallel Algorithm for Longest Common Subsequence Problem on GPUs. Lecture Notes in Engineering and Computer Science. 1. \par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab CUDA Toolkit Documentation. (2020). Retrieved 10 August 2020, from https://docs.nvidia.com/cuda/\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab Harwood, A., & Lanch, A. (2020). COMP90025 Parallel and Multicore. Retrieved 10 August 2020, from School of Computing and Information Systems The University of Melbourne\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 6.\tx360\tab Zeller, C. (2011). CUDA C/C++ Basics Supercomputing. Retrieved 7 August 2020, from https://www.nvidia.com/docs/IO/116711/sc11-cuda-c-basics.pdf\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 7.\tx360\tab Han, J., & Sharma, B. Learn CUDA programming.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 8.\tx360\tab Ruetsch, G., & Oster, B. (2020). Getting Started with CUDA. Retrieved 10 August 2020, from https://www.nvidia.com/content/cudazone/download/Getting{\i Started}w{\i CUDA}Training_NVISION08.pdf\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 9.\tx360\tab Harris, M. (2017). An Even Easier Introduction to CUDA. Retrieved 10 August 2020, from https://developer.nvidia.com/blog/even-easier-introduction-cuda/\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 10.\tx360\tab Modern Parallel Computing (Part 3) - Some Typical GPU Architectures \u183? Infectious Waste. (2020). Retrieved 10 August 2020, from https://infectiouswaste.github.io/2019/02/20/typical-gpu-arch/\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 11.\tx360\tab Cheng, J. (2014). Professional Cuda C programming. Indianapolis, IN: John Wiley and Sons, Inc.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 12.\tx360\tab Harris, M., Ebersole, M., & Sakharnykh, N. (2020). Unified Memory in CUDA 6 | NVIDIA Developer Blog. Retrieved 10 August 2020, from https://developer.nvidia.com/blog/unified-memory-in-cuda-6/\sa180\par}
}
